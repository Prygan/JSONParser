# Generated from Sql.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a5")
        buf.write("\u0750\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\3\2\3\2\7\2\u00c9\n\2\f\2")
        buf.write("\16\2\u00cc\13\2\3\2\3\2\3\3\3\3\3\3\3\4\7\4\u00d4\n\4")
        buf.write("\f\4\16\4\u00d7\13\4\3\4\3\4\6\4\u00db\n\4\r\4\16\4\u00dc")
        buf.write("\3\4\7\4\u00e0\n\4\f\4\16\4\u00e3\13\4\3\4\7\4\u00e6\n")
        buf.write("\4\f\4\16\4\u00e9\13\4\3\5\3\5\3\5\5\5\u00ee\n\5\5\5\u00f0")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u0110\n\5\3\6\3\6\3\6\5\6\u0115\n")
        buf.write("\6\3\6\3\6\3\6\5\6\u011a\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u0124\n\6\3\6\5\6\u0127\n\6\3\6\5\6\u012a\n")
        buf.write("\6\3\6\5\6\u012d\n\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u013e\n\t\3\n\3\n\5\n\u0142")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\13\3\13\5\13\u014a\n\13\3\13\3")
        buf.write("\13\5\13\u014e\n\13\5\13\u0150\n\13\3\f\3\f\3\f\5\f\u0155")
        buf.write("\n\f\5\f\u0157\n\f\3\r\3\r\5\r\u015b\n\r\3\r\3\r\3\r\7")
        buf.write("\r\u0160\n\r\f\r\16\r\u0163\13\r\5\r\u0165\n\r\3\r\3\r")
        buf.write("\3\r\5\r\u016a\n\r\3\r\3\r\5\r\u016e\n\r\3\r\6\r\u0171")
        buf.write("\n\r\r\r\16\r\u0172\3\r\3\r\3\r\3\r\3\r\7\r\u017a\n\r")
        buf.write("\f\r\16\r\u017d\13\r\5\r\u017f\n\r\3\r\3\r\3\r\3\r\5\r")
        buf.write("\u0185\n\r\5\r\u0187\n\r\3\16\3\16\5\16\u018b\n\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u0191\n\16\3\16\3\16\3\16\5\16\u0196")
        buf.write("\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u019f\n")
        buf.write("\16\f\16\16\16\u01a2\13\16\3\16\3\16\3\16\5\16\u01a7\n")
        buf.write("\16\3\17\3\17\5\17\u01ab\n\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u01b1\n\17\3\17\3\17\3\17\5\17\u01b6\n\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\7\17\u01bf\n\17\f\17\16\17\u01c2")
        buf.write("\13\17\3\17\3\17\3\17\5\17\u01c7\n\17\3\17\3\17\5\17\u01cb")
        buf.write("\n\17\3\17\5\17\u01ce\n\17\3\20\3\20\5\20\u01d2\n\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u01d8\n\20\3\20\3\20\3\20\5\20")
        buf.write("\u01dd\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u01e4\n\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u01ed\n\20\f\20")
        buf.write("\16\20\u01f0\13\20\5\20\u01f2\n\20\5\20\u01f4\n\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u01fa\n\20\3\20\3\20\3\20\3\20\5")
        buf.write("\20\u0200\n\20\3\20\3\20\5\20\u0204\n\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\5\20\u020b\n\20\3\20\3\20\6\20\u020f\n\20\r")
        buf.write("\20\16\20\u0210\3\20\3\20\3\21\3\21\5\21\u0217\n\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u021d\n\21\3\21\3\21\3\21\5\21")
        buf.write("\u0222\n\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u022e\n\22\3\22\3\22\3\22\5\22\u0233\n\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u023c\n\22\f")
        buf.write("\22\16\22\u023f\13\22\3\22\3\22\5\22\u0243\n\22\3\23\5")
        buf.write("\23\u0246\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u024d\n\23")
        buf.write("\3\24\5\24\u0250\n\24\3\24\3\24\3\24\3\24\3\24\5\24\u0257")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\24\7\24\u025e\n\24\f\24\16")
        buf.write("\24\u0261\13\24\5\24\u0263\n\24\3\24\3\24\3\24\3\24\5")
        buf.write("\24\u0269\n\24\5\24\u026b\n\24\3\25\3\25\5\25\u026f\n")
        buf.write("\25\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u0277\n\26\3\26")
        buf.write("\3\26\3\26\5\26\u027c\n\26\3\26\3\26\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u0284\n\27\3\27\3\27\3\27\5\27\u0289\n\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\30\5\30\u0291\n\30\3\30\3\30\3")
        buf.write("\30\5\30\u0296\n\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u029e\n\31\3\31\3\31\3\31\5\31\u02a3\n\31\3\31\3\31\3")
        buf.write("\32\3\32\5\32\u02a9\n\32\3\32\3\32\3\32\7\32\u02ae\n\32")
        buf.write("\f\32\16\32\u02b1\13\32\5\32\u02b3\n\32\3\32\3\32\3\32")
        buf.write("\3\32\7\32\u02b9\n\32\f\32\16\32\u02bc\13\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\7\32\u02c3\n\32\f\32\16\32\u02c6\13\32")
        buf.write("\5\32\u02c8\n\32\3\32\3\32\3\32\3\32\5\32\u02ce\n\32\5")
        buf.write("\32\u02d0\n\32\3\33\5\33\u02d3\n\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\5\33\u02e6\n\33\3\33\3\33\3\33\3\33\5\33\u02ec")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u02f3\n\33\f\33\16")
        buf.write("\33\u02f6\13\33\3\33\3\33\5\33\u02fa\n\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\7\33\u0301\n\33\f\33\16\33\u0304\13\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\7\33\u030c\n\33\f\33\16\33")
        buf.write("\u030f\13\33\3\33\3\33\7\33\u0313\n\33\f\33\16\33\u0316")
        buf.write("\13\33\3\33\3\33\3\33\5\33\u031b\n\33\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u0321\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u032a\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u0331\n")
        buf.write("\35\3\35\3\35\5\35\u0335\n\35\5\35\u0337\n\35\3\36\3\36")
        buf.write("\5\36\u033b\n\36\3\36\3\36\3\37\3\37\3\37\5\37\u0342\n")
        buf.write("\37\5\37\u0344\n\37\3\37\3\37\5\37\u0348\n\37\3\37\5\37")
        buf.write("\u034b\n\37\3 \3 \3 \3!\3!\5!\u0352\n!\3!\3!\3!\7!\u0357")
        buf.write("\n!\f!\16!\u035a\13!\5!\u035c\n!\3!\3!\3!\3!\3!\3!\7!")
        buf.write("\u0364\n!\f!\16!\u0367\13!\5!\u0369\n!\3!\3!\3!\3!\5!")
        buf.write("\u036f\n!\5!\u0371\n!\3\"\3\"\5\"\u0375\n\"\3\"\3\"\3")
        buf.write("\"\7\"\u037a\n\"\f\"\16\"\u037d\13\"\5\"\u037f\n\"\3\"")
        buf.write("\3\"\3\"\3\"\7\"\u0385\n\"\f\"\16\"\u0388\13\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\7\"\u038f\n\"\f\"\16\"\u0392\13\"\5\"\u0394")
        buf.write("\n\"\3\"\3\"\3\"\3\"\5\"\u039a\n\"\5\"\u039c\n\"\3#\3")
        buf.write("#\5#\u03a0\n#\3#\3#\3#\7#\u03a5\n#\f#\16#\u03a8\13#\3")
        buf.write("#\3#\3#\3#\7#\u03ae\n#\f#\16#\u03b1\13#\3#\5#\u03b4\n")
        buf.write("#\5#\u03b6\n#\3#\3#\5#\u03ba\n#\3#\3#\3#\3#\3#\7#\u03c1")
        buf.write("\n#\f#\16#\u03c4\13#\3#\3#\5#\u03c8\n#\5#\u03ca\n#\3#")
        buf.write("\3#\3#\3#\3#\7#\u03d1\n#\f#\16#\u03d4\13#\3#\3#\3#\3#")
        buf.write("\3#\3#\7#\u03dc\n#\f#\16#\u03df\13#\3#\3#\7#\u03e3\n#")
        buf.write("\f#\16#\u03e6\13#\5#\u03e8\n#\3$\5$\u03eb\n$\3$\3$\3$")
        buf.write("\3$\3$\3$\3$\3$\3$\3$\3$\5$\u03f8\n$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\7$\u0404\n$\f$\16$\u0407\13$\3$\3$\5$\u040b")
        buf.write("\n$\3%\5%\u040e\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5")
        buf.write("%\u041b\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u0427\n%\f")
        buf.write("%\16%\u042a\13%\3%\3%\5%\u042e\n%\3%\3%\3%\3%\3%\7%\u0435")
        buf.write("\n%\f%\16%\u0438\13%\5%\u043a\n%\3%\3%\3%\3%\5%\u0440")
        buf.write("\n%\5%\u0442\n%\3&\3&\3\'\3\'\3\'\7\'\u0449\n\'\f\'\16")
        buf.write("\'\u044c\13\'\3(\3(\3(\3(\5(\u0452\n(\3(\3(\3(\3(\3(\5")
        buf.write("(\u0459\n(\3(\3(\3(\5(\u045e\n(\3(\3(\5(\u0462\n(\3)\3")
        buf.write(")\5)\u0466\n)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3")
        buf.write(")\5)\u0476\n)\3*\3*\3*\5*\u047b\n*\3*\3*\5*\u047f\n*\3")
        buf.write("+\3+\3,\3,\3,\3,\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\5.\u0496\n.\3.\3.\6.\u049a\n.\r.\16.\u049b\5.")
        buf.write("\u049e\n.\3/\3/\5/\u04a2\n/\3\60\3\60\3\60\5\60\u04a7")
        buf.write("\n\60\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u04af\n\61\3")
        buf.write("\61\3\61\3\61\5\61\u04b4\n\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u04bd\n\61\3\61\3\61\3\61\7\61\u04c2\n")
        buf.write("\61\f\61\16\61\u04c5\13\61\3\61\5\61\u04c8\n\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u04d8\n\61\3\61\5\61\u04db\n\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\5\61\u04e3\n\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\6\61\u04ea\n\61\r\61\16\61\u04eb\3\61\3\61")
        buf.write("\5\61\u04f0\n\61\3\61\3\61\3\61\5\61\u04f5\n\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\5\61\u0513\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u051f\n\61")
        buf.write("\3\61\3\61\3\61\5\61\u0524\n\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\5\61\u0530\n\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u0536\n\61\3\61\3\61\3\61\3\61\3\61\5")
        buf.write("\61\u053d\n\61\3\61\3\61\5\61\u0541\n\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\7\61\u0549\n\61\f\61\16\61\u054c\13\61")
        buf.write("\5\61\u054e\n\61\3\61\3\61\3\61\3\61\5\61\u0554\n\61\3")
        buf.write("\61\5\61\u0557\n\61\7\61\u0559\n\61\f\61\16\61\u055c\13")
        buf.write("\61\3\62\3\62\3\62\3\62\5\62\u0562\n\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\7\62\u0569\n\62\f\62\16\62\u056c\13\62\3\62")
        buf.write("\3\62\5\62\u0570\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u057c\n\62\3\62\3\62\5\62\u0580")
        buf.write("\n\62\7\62\u0582\n\62\f\62\16\62\u0585\13\62\3\62\5\62")
        buf.write("\u0588\n\62\3\62\3\62\3\62\3\62\3\62\5\62\u058f\n\62\3")
        buf.write("\62\5\62\u0592\n\62\5\62\u0594\n\62\3\63\3\63\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u059e\n\64\3\64\3\64\3\65\3")
        buf.write("\65\3\65\5\65\u05a5\n\65\3\65\5\65\u05a8\n\65\3\66\3\66")
        buf.write("\5\66\u05ac\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\5\66\u05b7\n\66\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\7\67\u05bf\n\67\f\67\16\67\u05c2\13\67\3\67\3\67\3\67")
        buf.write("\38\38\38\38\38\38\78\u05cd\n8\f8\168\u05d0\138\38\38")
        buf.write("\38\39\39\59\u05d7\n9\39\59\u05da\n9\39\39\39\39\79\u05e0")
        buf.write("\n9\f9\169\u05e3\139\39\39\39\3:\3:\5:\u05ea\n:\3:\3:")
        buf.write("\3:\3:\7:\u05f0\n:\f:\16:\u05f3\13:\3:\3:\3:\3;\3;\3<")
        buf.write("\3<\5<\u05fc\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\7")
        buf.write("<\u060a\n<\f<\16<\u060d\13<\3=\3=\3=\5=\u0612\n=\3=\3")
        buf.write("=\3=\3=\3=\3=\5=\u061a\n=\3>\3>\3>\5>\u061f\n>\3>\5>\u0622")
        buf.write("\n>\3?\3?\3?\5?\u0627\n?\3@\3@\3@\3@\3@\7@\u062e\n@\f")
        buf.write("@\16@\u0631\13@\3@\3@\5@\u0635\n@\3@\3@\3@\3@\3@\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\5A\u0643\nA\3A\5A\u0646\nA\5A\u0648\n")
        buf.write("A\3B\3B\3B\5B\u064d\nB\3B\3B\5B\u0651\nB\3B\5B\u0654\n")
        buf.write("B\3B\3B\3B\3B\3B\5B\u065b\nB\3B\3B\3B\3B\7B\u0661\nB\f")
        buf.write("B\16B\u0664\13B\3B\5B\u0667\nB\3B\3B\5B\u066b\nB\3B\5")
        buf.write("B\u066e\nB\3B\3B\3B\3B\5B\u0674\nB\3B\5B\u0677\nB\5B\u0679")
        buf.write("\nB\3C\3C\3C\3C\3C\7C\u0680\nC\fC\16C\u0683\13C\3D\3D")
        buf.write("\5D\u0687\nD\3D\3D\5D\u068b\nD\3D\3D\5D\u068f\nD\3D\5")
        buf.write("D\u0692\nD\3E\3E\3E\3E\3E\3E\3E\7E\u069b\nE\fE\16E\u069e")
        buf.write("\13E\3E\3E\5E\u06a2\nE\3F\3F\5F\u06a6\nF\3F\3F\3F\7F\u06ab")
        buf.write("\nF\fF\16F\u06ae\13F\3F\3F\3F\3F\7F\u06b4\nF\fF\16F\u06b7")
        buf.write("\13F\3F\5F\u06ba\nF\5F\u06bc\nF\3F\3F\5F\u06c0\nF\3F\3")
        buf.write("F\3F\3F\3F\7F\u06c7\nF\fF\16F\u06ca\13F\3F\3F\5F\u06ce")
        buf.write("\nF\5F\u06d0\nF\3F\3F\3F\3F\3F\7F\u06d7\nF\fF\16F\u06da")
        buf.write("\13F\3F\3F\3F\3F\3F\3F\7F\u06e2\nF\fF\16F\u06e5\13F\3")
        buf.write("F\3F\7F\u06e9\nF\fF\16F\u06ec\13F\5F\u06ee\nF\3G\3G\3")
        buf.write("G\3G\3G\5G\u06f5\nG\3H\3H\3H\3H\3H\7H\u06fc\nH\fH\16H")
        buf.write("\u06ff\13H\3H\3H\5H\u0703\nH\3I\5I\u0706\nI\3I\3I\5I\u070a")
        buf.write("\nI\3J\3J\3K\3K\3L\3L\3M\3M\5M\u0714\nM\3N\3N\3O\3O\3")
        buf.write("P\6P\u071b\nP\rP\16P\u071c\3Q\3Q\3R\3R\3S\3S\3T\3T\3U")
        buf.write("\3U\3V\3V\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3]\3]")
        buf.write("\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\3c\3c\5c\u074e\nc\3c\2\3`d\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\2\24\5\2??KKXX\4\2\64\64GG\4\2\n\nqq\3\2")
        buf.write("\u008b\u008c\4\2\"\"CC\4\2\'\'AA\7\2\36\36NNWW\u0082\u0082")
        buf.write("\u0085\u0085\4\2\f\f\21\22\3\2\r\16\3\2\23\26\3\2\27\32")
        buf.write("\6\2SSggii~~\4\2@@\u0093\u0093\5\2\36\36NN\u0085\u0085")
        buf.write("\6\29;oo\u009e\u009e\u00a0\u00a1\4\2\r\17mm\4\2\u009d")
        buf.write("\u009d\u00a0\u00a0\4\2\36rt\u009c\2\u0864\2\u00ca\3\2")
        buf.write("\2\2\4\u00cf\3\2\2\2\6\u00d5\3\2\2\2\b\u00ef\3\2\2\2\n")
        buf.write("\u0111\3\2\2\2\f\u012e\3\2\2\2\16\u0133\3\2\2\2\20\u0136")
        buf.write("\3\2\2\2\22\u013f\3\2\2\2\24\u0147\3\2\2\2\26\u0151\3")
        buf.write("\2\2\2\30\u0164\3\2\2\2\32\u0188\3\2\2\2\34\u01a8\3\2")
        buf.write("\2\2\36\u01cf\3\2\2\2 \u0214\3\2\2\2\"\u0227\3\2\2\2$")
        buf.write("\u0245\3\2\2\2&\u024f\3\2\2\2(\u026c\3\2\2\2*\u0272\3")
        buf.write("\2\2\2,\u027f\3\2\2\2.\u028c\3\2\2\2\60\u0299\3\2\2\2")
        buf.write("\62\u02b2\3\2\2\2\64\u02d2\3\2\2\2\66\u031c\3\2\2\28\u032b")
        buf.write("\3\2\2\2:\u0338\3\2\2\2<\u033e\3\2\2\2>\u034c\3\2\2\2")
        buf.write("@\u035b\3\2\2\2B\u037e\3\2\2\2D\u03e7\3\2\2\2F\u03ea\3")
        buf.write("\2\2\2H\u040d\3\2\2\2J\u0443\3\2\2\2L\u0445\3\2\2\2N\u044d")
        buf.write("\3\2\2\2P\u0465\3\2\2\2R\u0477\3\2\2\2T\u0480\3\2\2\2")
        buf.write("V\u0482\3\2\2\2X\u0486\3\2\2\2Z\u0489\3\2\2\2\\\u04a1")
        buf.write("\3\2\2\2^\u04a6\3\2\2\2`\u04f4\3\2\2\2b\u055d\3\2\2\2")
        buf.write("d\u0595\3\2\2\2f\u0597\3\2\2\2h\u05a1\3\2\2\2j\u05ab\3")
        buf.write("\2\2\2l\u05b8\3\2\2\2n\u05c6\3\2\2\2p\u05d4\3\2\2\2r\u05e7")
        buf.write("\3\2\2\2t\u05f7\3\2\2\2v\u05f9\3\2\2\2x\u0611\3\2\2\2")
        buf.write("z\u061b\3\2\2\2|\u0626\3\2\2\2~\u0628\3\2\2\2\u0080\u0647")
        buf.write("\3\2\2\2\u0082\u0678\3\2\2\2\u0084\u067a\3\2\2\2\u0086")
        buf.write("\u0691\3\2\2\2\u0088\u06a1\3\2\2\2\u008a\u06ed\3\2\2\2")
        buf.write("\u008c\u06f4\3\2\2\2\u008e\u06f6\3\2\2\2\u0090\u0709\3")
        buf.write("\2\2\2\u0092\u070b\3\2\2\2\u0094\u070d\3\2\2\2\u0096\u070f")
        buf.write("\3\2\2\2\u0098\u0713\3\2\2\2\u009a\u0715\3\2\2\2\u009c")
        buf.write("\u0717\3\2\2\2\u009e\u071a\3\2\2\2\u00a0\u071e\3\2\2\2")
        buf.write("\u00a2\u0720\3\2\2\2\u00a4\u0722\3\2\2\2\u00a6\u0724\3")
        buf.write("\2\2\2\u00a8\u0726\3\2\2\2\u00aa\u0728\3\2\2\2\u00ac\u072a")
        buf.write("\3\2\2\2\u00ae\u072c\3\2\2\2\u00b0\u072e\3\2\2\2\u00b2")
        buf.write("\u0730\3\2\2\2\u00b4\u0732\3\2\2\2\u00b6\u0734\3\2\2\2")
        buf.write("\u00b8\u0736\3\2\2\2\u00ba\u0738\3\2\2\2\u00bc\u073a\3")
        buf.write("\2\2\2\u00be\u073c\3\2\2\2\u00c0\u073e\3\2\2\2\u00c2\u0740")
        buf.write("\3\2\2\2\u00c4\u074d\3\2\2\2\u00c6\u00c9\5\6\4\2\u00c7")
        buf.write("\u00c9\5\4\3\2\u00c8\u00c6\3\2\2\2\u00c8\u00c7\3\2\2\2")
        buf.write("\u00c9\u00cc\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3")
        buf.write("\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cd\u00ce")
        buf.write("\7\2\2\3\u00ce\3\3\2\2\2\u00cf\u00d0\7\u00a5\2\2\u00d0")
        buf.write("\u00d1\b\3\1\2\u00d1\5\3\2\2\2\u00d2\u00d4\7\6\2\2\u00d3")
        buf.write("\u00d2\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2")
        buf.write("\u00d5\u00d6\3\2\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d5\3")
        buf.write("\2\2\2\u00d8\u00e1\5\b\5\2\u00d9\u00db\7\6\2\2\u00da\u00d9")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc")
        buf.write("\u00dd\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0\5\b\5\2")
        buf.write("\u00df\u00da\3\2\2\2\u00e0\u00e3\3\2\2\2\u00e1\u00df\3")
        buf.write("\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e7\3\2\2\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e4\u00e6\7\6\2\2\u00e5\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2")
        buf.write("\u00e8\7\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00ed\7M\2")
        buf.write("\2\u00eb\u00ec\7z\2\2\u00ec\u00ee\7w\2\2\u00ed\u00eb\3")
        buf.write("\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00ea")
        buf.write("\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u010f\3\2\2\2\u00f1")
        buf.write("\u0110\5\n\6\2\u00f2\u0110\5\20\t\2\u00f3\u0110\5\22\n")
        buf.write("\2\u00f4\u0110\5\24\13\2\u00f5\u0110\5\26\f\2\u00f6\u0110")
        buf.write("\5\30\r\2\u00f7\u0110\5\32\16\2\u00f8\u0110\5\34\17\2")
        buf.write("\u00f9\u0110\5\36\20\2\u00fa\u0110\5 \21\2\u00fb\u0110")
        buf.write("\5\"\22\2\u00fc\u0110\5$\23\2\u00fd\u0110\5&\24\2\u00fe")
        buf.write("\u0110\5(\25\2\u00ff\u0110\5*\26\2\u0100\u0110\5,\27\2")
        buf.write("\u0101\u0110\5.\30\2\u0102\u0110\5\60\31\2\u0103\u0110")
        buf.write("\5\62\32\2\u0104\u0110\5\64\33\2\u0105\u0110\5\66\34\2")
        buf.write("\u0106\u0110\58\35\2\u0107\u0110\5:\36\2\u0108\u0110\5")
        buf.write("<\37\2\u0109\u0110\5> \2\u010a\u0110\5@!\2\u010b\u0110")
        buf.write("\5B\"\2\u010c\u0110\5F$\2\u010d\u0110\5H%\2\u010e\u0110")
        buf.write("\5J&\2\u010f\u00f1\3\2\2\2\u010f\u00f2\3\2\2\2\u010f\u00f3")
        buf.write("\3\2\2\2\u010f\u00f4\3\2\2\2\u010f\u00f5\3\2\2\2\u010f")
        buf.write("\u00f6\3\2\2\2\u010f\u00f7\3\2\2\2\u010f\u00f8\3\2\2\2")
        buf.write("\u010f\u00f9\3\2\2\2\u010f\u00fa\3\2\2\2\u010f\u00fb\3")
        buf.write("\2\2\2\u010f\u00fc\3\2\2\2\u010f\u00fd\3\2\2\2\u010f\u00fe")
        buf.write("\3\2\2\2\u010f\u00ff\3\2\2\2\u010f\u0100\3\2\2\2\u010f")
        buf.write("\u0101\3\2\2\2\u010f\u0102\3\2\2\2\u010f\u0103\3\2\2\2")
        buf.write("\u010f\u0104\3\2\2\2\u010f\u0105\3\2\2\2\u010f\u0106\3")
        buf.write("\2\2\2\u010f\u0107\3\2\2\2\u010f\u0108\3\2\2\2\u010f\u0109")
        buf.write("\3\2\2\2\u010f\u010a\3\2\2\2\u010f\u010b\3\2\2\2\u010f")
        buf.write("\u010c\3\2\2\2\u010f\u010d\3\2\2\2\u010f\u010e\3\2\2\2")
        buf.write("\u0110\t\3\2\2\2\u0111\u0112\7#\2\2\u0112\u0114\7\u008a")
        buf.write("\2\2\u0113\u0115\7s\2\2\u0114\u0113\3\2\2\2\u0114\u0115")
        buf.write("\3\2\2\2\u0115\u0119\3\2\2\2\u0116\u0117\5\u00a4S\2\u0117")
        buf.write("\u0118\7\7\2\2\u0118\u011a\3\2\2\2\u0119\u0116\3\2\2\2")
        buf.write("\u0119\u011a\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u0126\5")
        buf.write("\u00a6T\2\u011c\u011d\7\u0081\2\2\u011d\u011e\7\u008e")
        buf.write("\2\2\u011e\u0127\5\u00acW\2\u011f\u0127\5\16\b\2\u0120")
        buf.write("\u0127\5\f\7\2\u0121\u0123\7 \2\2\u0122\u0124\7\63\2\2")
        buf.write("\u0123\u0122\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125\3")
        buf.write("\2\2\2\u0125\u0127\5L\'\2\u0126\u011c\3\2\2\2\u0126\u011f")
        buf.write("\3\2\2\2\u0126\u0120\3\2\2\2\u0126\u0121\3\2\2\2\u0127")
        buf.write("\u0129\3\2\2\2\u0128\u012a\7H\2\2\u0129\u0128\3\2\2\2")
        buf.write("\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u012d\5")
        buf.write("\u009eP\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\13\3\2\2\2\u012e\u012f\7 \2\2\u012f\u0130\7\66\2\2\u0130")
        buf.write("\u0131\5\u00c4c\2\u0131\u0132\5j\66\2\u0132\r\3\2\2\2")
        buf.write("\u0133\u0134\7 \2\2\u0134\u0135\5j\66\2\u0135\17\3\2\2")
        buf.write("\2\u0136\u013d\7$\2\2\u0137\u013e\5\u00a4S\2\u0138\u013e")
        buf.write("\5\u00aaV\2\u0139\u013a\5\u00a4S\2\u013a\u013b\7\7\2\2")
        buf.write("\u013b\u013c\5\u00aaV\2\u013c\u013e\3\2\2\2\u013d\u0137")
        buf.write("\3\2\2\2\u013d\u0138\3\2\2\2\u013d\u0139\3\2\2\2\u013d")
        buf.write("\u013e\3\2\2\2\u013e\21\3\2\2\2\u013f\u0141\7(\2\2\u0140")
        buf.write("\u0142\7<\2\2\u0141\u0140\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0143\3\2\2\2\u0143\u0144\5`\61\2\u0144\u0145\7")
        buf.write("&\2\2\u0145\u0146\5\u00a4S\2\u0146\23\3\2\2\2\u0147\u0149")
        buf.write("\7+\2\2\u0148\u014a\t\2\2\2\u0149\u0148\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014f\3\2\2\2\u014b\u014d\7\u008f")
        buf.write("\2\2\u014c\u014e\5\u00c2b\2\u014d\u014c\3\2\2\2\u014d")
        buf.write("\u014e\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u014b\3\2\2\2")
        buf.write("\u014f\u0150\3\2\2\2\u0150\25\3\2\2\2\u0151\u0156\t\3")
        buf.write("\2\2\u0152\u0154\7\u008f\2\2\u0153\u0155\5\u00c2b\2\u0154")
        buf.write("\u0153\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0157\3\2\2\2")
        buf.write("\u0156\u0152\3\2\2\2\u0156\u0157\3\2\2\2\u0157\27\3\2")
        buf.write("\2\2\u0158\u015a\7\u009b\2\2\u0159\u015b\7|\2\2\u015a")
        buf.write("\u0159\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015c\3\2\2\2")
        buf.write("\u015c\u0161\5~@\2\u015d\u015e\7\n\2\2\u015e\u0160\5~")
        buf.write("@\2\u015f\u015d\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0165\3\2\2\2\u0163")
        buf.write("\u0161\3\2\2\2\u0164\u0158\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u0170\5\u008aF\2\u0167\u0169")
        buf.write("\7\u0091\2\2\u0168\u016a\7\"\2\2\u0169\u0168\3\2\2\2\u0169")
        buf.write("\u016a\3\2\2\2\u016a\u016e\3\2\2\2\u016b\u016e\7`\2\2")
        buf.write("\u016c\u016e\7J\2\2\u016d\u0167\3\2\2\2\u016d\u016b\3")
        buf.write("\2\2\2\u016d\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0171")
        buf.write("\5\u008aF\2\u0170\u016d\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u017e\3\2\2\2")
        buf.write("\u0174\u0175\7u\2\2\u0175\u0176\7-\2\2\u0176\u017b\5z")
        buf.write(">\2\u0177\u0178\7\n\2\2\u0178\u017a\5z>\2\u0179\u0177")
        buf.write("\3\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2")
        buf.write("\u017e\u0174\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0186\3")
        buf.write("\2\2\2\u0180\u0181\7h\2\2\u0181\u0184\5`\61\2\u0182\u0183")
        buf.write("\t\4\2\2\u0183\u0185\5`\61\2\u0184\u0182\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0185\u0187\3\2\2\2\u0186\u0180\3\2\2\2")
        buf.write("\u0186\u0187\3\2\2\2\u0187\31\3\2\2\2\u0188\u018a\7\67")
        buf.write("\2\2\u0189\u018b\7\u0092\2\2\u018a\u0189\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u0190\7Z\2\2")
        buf.write("\u018d\u018e\7V\2\2\u018e\u018f\7m\2\2\u018f\u0191\7L")
        buf.write("\2\2\u0190\u018d\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0195")
        buf.write("\3\2\2\2\u0192\u0193\5\u00a4S\2\u0193\u0194\7\7\2\2\u0194")
        buf.write("\u0196\3\2\2\2\u0195\u0192\3\2\2\2\u0195\u0196\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\u0198\5\u00b4[\2\u0198\u0199")
        buf.write("\7r\2\2\u0199\u019a\5\u00a8U\2\u019a\u019b\7\b\2\2\u019b")
        buf.write("\u01a0\5h\65\2\u019c\u019d\7\n\2\2\u019d\u019f\5h\65\2")
        buf.write("\u019e\u019c\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u01a6\7\t\2\2\u01a4\u01a5\7\u009a\2\2\u01a5")
        buf.write("\u01a7\5`\61\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2")
        buf.write("\u01a7\33\3\2\2\2\u01a8\u01aa\7\67\2\2\u01a9\u01ab\t\5")
        buf.write("\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac")
        buf.write("\3\2\2\2\u01ac\u01b0\7\u008a\2\2\u01ad\u01ae\7V\2\2\u01ae")
        buf.write("\u01af\7m\2\2\u01af\u01b1\7L\2\2\u01b0\u01ad\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01b5\3\2\2\2\u01b2\u01b3\5\u00a4")
        buf.write("S\2\u01b3\u01b4\7\7\2\2\u01b4\u01b6\3\2\2\2\u01b5\u01b2")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7")
        buf.write("\u01ca\5\u00a8U\2\u01b8\u01b9\7\b\2\2\u01b9\u01c0\5L\'")
        buf.write("\2\u01ba\u01bb\7\n\2\2\u01bb\u01bf\5j\66\2\u01bc\u01bd")
        buf.write("\7\n\2\2\u01bd\u01bf\5L\'\2\u01be\u01ba\3\2\2\2\u01be")
        buf.write("\u01bc\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2")
        buf.write("\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2\u01c2\u01c0\3")
        buf.write("\2\2\2\u01c3\u01c6\7\t\2\2\u01c4\u01c5\7\u009c\2\2\u01c5")
        buf.write("\u01c7\7\u009d\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3\2")
        buf.write("\2\2\u01c7\u01cb\3\2\2\2\u01c8\u01c9\7&\2\2\u01c9\u01cb")
        buf.write("\5B\"\2\u01ca\u01b8\3\2\2\2\u01ca\u01c8\3\2\2\2\u01cb")
        buf.write("\u01cd\3\2\2\2\u01cc\u01ce\5\u009eP\2\u01cd\u01cc\3\2")
        buf.write("\2\2\u01cd\u01ce\3\2\2\2\u01ce\35\3\2\2\2\u01cf\u01d1")
        buf.write("\7\67\2\2\u01d0\u01d2\t\5\2\2\u01d1\u01d0\3\2\2\2\u01d1")
        buf.write("\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d7\7\u0090")
        buf.write("\2\2\u01d4\u01d5\7V\2\2\u01d5\u01d6\7m\2\2\u01d6\u01d8")
        buf.write("\7L\2\2\u01d7\u01d4\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8")
        buf.write("\u01dc\3\2\2\2\u01d9\u01da\5\u00a4S\2\u01da\u01db\7\7")
        buf.write("\2\2\u01db\u01dd\3\2\2\2\u01dc\u01d9\3\2\2\2\u01dc\u01dd")
        buf.write("\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e3\5\u00b6\\\2\u01df")
        buf.write("\u01e4\7*\2\2\u01e0\u01e4\7!\2\2\u01e1\u01e2\7_\2\2\u01e2")
        buf.write("\u01e4\7p\2\2\u01e3\u01df\3\2\2\2\u01e3\u01e0\3\2\2\2")
        buf.write("\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01f3\3")
        buf.write("\2\2\2\u01e5\u01f4\7@\2\2\u01e6\u01f4\7^\2\2\u01e7\u01f1")
        buf.write("\7\u0093\2\2\u01e8\u01e9\7p\2\2\u01e9\u01ee\5\u00aeX\2")
        buf.write("\u01ea\u01eb\7\n\2\2\u01eb\u01ed\5\u00aeX\2\u01ec\u01ea")
        buf.write("\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee")
        buf.write("\u01ef\3\2\2\2\u01ef\u01f2\3\2\2\2\u01f0\u01ee\3\2\2\2")
        buf.write("\u01f1\u01e8\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f4\3")
        buf.write("\2\2\2\u01f3\u01e5\3\2\2\2\u01f3\u01e6\3\2\2\2\u01f3\u01e7")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f9\7r\2\2\u01f6")
        buf.write("\u01f7\5\u00a4S\2\u01f7\u01f8\7\7\2\2\u01f8\u01fa\3\2")
        buf.write("\2\2\u01f9\u01f6\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb")
        buf.write("\3\2\2\2\u01fb\u01ff\5\u00a8U\2\u01fc\u01fd\7O\2\2\u01fd")
        buf.write("\u01fe\7E\2\2\u01fe\u0200\7\u0086\2\2\u01ff\u01fc\3\2")
        buf.write("\2\2\u01ff\u0200\3\2\2\2\u0200\u0203\3\2\2\2\u0201\u0202")
        buf.write("\7\u0099\2\2\u0202\u0204\5`\61\2\u0203\u0201\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u020e\7+\2\2")
        buf.write("\u0206\u020b\5F$\2\u0207\u020b\5\64\33\2\u0208\u020b\5")
        buf.write("$\23\2\u0209\u020b\5B\"\2\u020a\u0206\3\2\2\2\u020a\u0207")
        buf.write("\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u0209\3\2\2\2\u020b")
        buf.write("\u020c\3\2\2\2\u020c\u020d\7\6\2\2\u020d\u020f\3\2\2\2")
        buf.write("\u020e\u020a\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u020e\3")
        buf.write("\2\2\2\u0210\u0211\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213")
        buf.write("\7G\2\2\u0213\37\3\2\2\2\u0214\u0216\7\67\2\2\u0215\u0217")
        buf.write("\t\5\2\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218\u021c\7\u0097\2\2\u0219\u021a\7V")
        buf.write("\2\2\u021a\u021b\7m\2\2\u021b\u021d\7L\2\2\u021c\u0219")
        buf.write("\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u0221\3\2\2\2\u021e")
        buf.write("\u021f\5\u00a4S\2\u021f\u0220\7\7\2\2\u0220\u0222\3\2")
        buf.write("\2\2\u0221\u021e\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223")
        buf.write("\3\2\2\2\u0223\u0224\5\u00b8]\2\u0224\u0225\7&\2\2\u0225")
        buf.write("\u0226\5B\"\2\u0226!\3\2\2\2\u0227\u0228\7\67\2\2\u0228")
        buf.write("\u0229\7\u0098\2\2\u0229\u022d\7\u008a\2\2\u022a\u022b")
        buf.write("\7V\2\2\u022b\u022c\7m\2\2\u022c\u022e\7L\2\2\u022d\u022a")
        buf.write("\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0232\3\2\2\2\u022f")
        buf.write("\u0230\5\u00a4S\2\u0230\u0231\7\7\2\2\u0231\u0233\3\2")
        buf.write("\2\2\u0232\u022f\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0235\5\u00a8U\2\u0235\u0236\7\u0094\2")
        buf.write("\2\u0236\u0242\5\u00ba^\2\u0237\u0238\7\b\2\2\u0238\u023d")
        buf.write("\5\u0098M\2\u0239\u023a\7\n\2\2\u023a\u023c\5\u0098M\2")
        buf.write("\u023b\u0239\3\2\2\2\u023c\u023f\3\2\2\2\u023d\u023b\3")
        buf.write("\2\2\2\u023d\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f\u023d")
        buf.write("\3\2\2\2\u0240\u0241\7\t\2\2\u0241\u0243\3\2\2\2\u0242")
        buf.write("\u0237\3\2\2\2\u0242\u0243\3\2\2\2\u0243#\3\2\2\2\u0244")
        buf.write("\u0246\5v<\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write("\u0247\3\2\2\2\u0247\u0248\7@\2\2\u0248\u0249\7Q\2\2\u0249")
        buf.write("\u024c\5x=\2\u024a\u024b\7\u009a\2\2\u024b\u024d\5`\61")
        buf.write("\2\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2\u024d%\3\2")
        buf.write("\2\2\u024e\u0250\5v<\2\u024f\u024e\3\2\2\2\u024f\u0250")
        buf.write("\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252\7@\2\2\u0252")
        buf.write("\u0253\7Q\2\2\u0253\u0256\5x=\2\u0254\u0255\7\u009a\2")
        buf.write("\2\u0255\u0257\5`\61\2\u0256\u0254\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u026a\3\2\2\2\u0258\u0259\7u\2\2\u0259")
        buf.write("\u025a\7-\2\2\u025a\u025f\5z>\2\u025b\u025c\7\n\2\2\u025c")
        buf.write("\u025e\5z>\2\u025d\u025b\3\2\2\2\u025e\u0261\3\2\2\2\u025f")
        buf.write("\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0263\3\2\2\2")
        buf.write("\u0261\u025f\3\2\2\2\u0262\u0258\3\2\2\2\u0262\u0263\3")
        buf.write("\2\2\2\u0263\u0264\3\2\2\2\u0264\u0265\7h\2\2\u0265\u0268")
        buf.write("\5`\61\2\u0266\u0267\t\4\2\2\u0267\u0269\5`\61\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\3\2\2\2")
        buf.write("\u026a\u0262\3\2\2\2\u026a\u026b\3\2\2\2\u026b\'\3\2\2")
        buf.write("\2\u026c\u026e\7B\2\2\u026d\u026f\7<\2\2\u026e\u026d\3")
        buf.write("\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271")
        buf.write("\5\u00a4S\2\u0271)\3\2\2\2\u0272\u0273\7D\2\2\u0273\u0276")
        buf.write("\7Z\2\2\u0274\u0275\7V\2\2\u0275\u0277\7L\2\2\u0276\u0274")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u027b\3\2\2\2\u0278")
        buf.write("\u0279\5\u00a4S\2\u0279\u027a\7\7\2\2\u027a\u027c\3\2")
        buf.write("\2\2\u027b\u0278\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u027d")
        buf.write("\3\2\2\2\u027d\u027e\5\u00b4[\2\u027e+\3\2\2\2\u027f\u0280")
        buf.write("\7D\2\2\u0280\u0283\7\u008a\2\2\u0281\u0282\7V\2\2\u0282")
        buf.write("\u0284\7L\2\2\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2")
        buf.write("\u0284\u0288\3\2\2\2\u0285\u0286\5\u00a4S\2\u0286\u0287")
        buf.write("\7\7\2\2\u0287\u0289\3\2\2\2\u0288\u0285\3\2\2\2\u0288")
        buf.write("\u0289\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028b\5\u00a8")
        buf.write("U\2\u028b-\3\2\2\2\u028c\u028d\7D\2\2\u028d\u0290\7\u0090")
        buf.write("\2\2\u028e\u028f\7V\2\2\u028f\u0291\7L\2\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0295\3\2\2\2\u0292")
        buf.write("\u0293\5\u00a4S\2\u0293\u0294\7\7\2\2\u0294\u0296\3\2")
        buf.write("\2\2\u0295\u0292\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297\u0298\5\u00b6\\\2\u0298/\3\2\2\2\u0299")
        buf.write("\u029a\7D\2\2\u029a\u029d\7\u0097\2\2\u029b\u029c\7V\2")
        buf.write("\2\u029c\u029e\7L\2\2\u029d\u029b\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u02a2\3\2\2\2\u029f\u02a0\5\u00a4S\2\u02a0")
        buf.write("\u02a1\7\7\2\2\u02a1\u02a3\3\2\2\2\u02a2\u029f\3\2\2\2")
        buf.write("\u02a2\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a5\5")
        buf.write("\u00b8]\2\u02a5\61\3\2\2\2\u02a6\u02a8\7\u009b\2\2\u02a7")
        buf.write("\u02a9\7|\2\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9\3\2\2\2")
        buf.write("\u02a9\u02aa\3\2\2\2\u02aa\u02af\5~@\2\u02ab\u02ac\7\n")
        buf.write("\2\2\u02ac\u02ae\5~@\2\u02ad\u02ab\3\2\2\2\u02ae\u02b1")
        buf.write("\3\2\2\2\u02af\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0")
        buf.write("\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2\u02a6\3\2\2\2")
        buf.write("\u02b2\u02b3\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02ba\5")
        buf.write("\u008aF\2\u02b5\u02b6\5\u008cG\2\u02b6\u02b7\5\u008aF")
        buf.write("\2\u02b7\u02b9\3\2\2\2\u02b8\u02b5\3\2\2\2\u02b9\u02bc")
        buf.write("\3\2\2\2\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02c7\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bd\u02be\7u\2\2")
        buf.write("\u02be\u02bf\7-\2\2\u02bf\u02c4\5z>\2\u02c0\u02c1\7\n")
        buf.write("\2\2\u02c1\u02c3\5z>\2\u02c2\u02c0\3\2\2\2\u02c3\u02c6")
        buf.write("\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5")
        buf.write("\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c7\u02bd\3\2\2\2")
        buf.write("\u02c7\u02c8\3\2\2\2\u02c8\u02cf\3\2\2\2\u02c9\u02ca\7")
        buf.write("h\2\2\u02ca\u02cd\5`\61\2\u02cb\u02cc\t\4\2\2\u02cc\u02ce")
        buf.write("\5`\61\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02d0\3\2\2\2\u02cf\u02c9\3\2\2\2\u02cf\u02d0\3\2\2\2")
        buf.write("\u02d0\63\3\2\2\2\u02d1\u02d3\5v<\2\u02d2\u02d1\3\2\2")
        buf.write("\2\u02d2\u02d3\3\2\2\2\u02d3\u02e5\3\2\2\2\u02d4\u02e6")
        buf.write("\7^\2\2\u02d5\u02e6\7\u0082\2\2\u02d6\u02d7\7^\2\2\u02d7")
        buf.write("\u02d8\7t\2\2\u02d8\u02e6\7\u0082\2\2\u02d9\u02da\7^\2")
        buf.write("\2\u02da\u02db\7t\2\2\u02db\u02e6\7\u0085\2\2\u02dc\u02dd")
        buf.write("\7^\2\2\u02dd\u02de\7t\2\2\u02de\u02e6\7\36\2\2\u02df")
        buf.write("\u02e0\7^\2\2\u02e0\u02e1\7t\2\2\u02e1\u02e6\7N\2\2\u02e2")
        buf.write("\u02e3\7^\2\2\u02e3\u02e4\7t\2\2\u02e4\u02e6\7W\2\2\u02e5")
        buf.write("\u02d4\3\2\2\2\u02e5\u02d5\3\2\2\2\u02e5\u02d6\3\2\2\2")
        buf.write("\u02e5\u02d9\3\2\2\2\u02e5\u02dc\3\2\2\2\u02e5\u02df\3")
        buf.write("\2\2\2\u02e5\u02e2\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02eb")
        buf.write("\7a\2\2\u02e8\u02e9\5\u00a4S\2\u02e9\u02ea\7\7\2\2\u02ea")
        buf.write("\u02ec\3\2\2\2\u02eb\u02e8\3\2\2\2\u02eb\u02ec\3\2\2\2")
        buf.write("\u02ec\u02ed\3\2\2\2\u02ed\u02f9\5\u00a8U\2\u02ee\u02ef")
        buf.write("\7\b\2\2\u02ef\u02f4\5\u00aeX\2\u02f0\u02f1\7\n\2\2\u02f1")
        buf.write("\u02f3\5\u00aeX\2\u02f2\u02f0\3\2\2\2\u02f3\u02f6\3\2")
        buf.write("\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7")
        buf.write("\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7\u02f8\7\t\2\2\u02f8")
        buf.write("\u02fa\3\2\2\2\u02f9\u02ee\3\2\2\2\u02f9\u02fa\3\2\2\2")
        buf.write("\u02fa\u031a\3\2\2\2\u02fb\u02fc\7\u0096\2\2\u02fc\u02fd")
        buf.write("\7\b\2\2\u02fd\u0302\5`\61\2\u02fe\u02ff\7\n\2\2\u02ff")
        buf.write("\u0301\5`\61\2\u0300\u02fe\3\2\2\2\u0301\u0304\3\2\2\2")
        buf.write("\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\3")
        buf.write("\2\2\2\u0304\u0302\3\2\2\2\u0305\u0314\7\t\2\2\u0306\u0307")
        buf.write("\7\n\2\2\u0307\u0308\7\b\2\2\u0308\u030d\5`\61\2\u0309")
        buf.write("\u030a\7\n\2\2\u030a\u030c\5`\61\2\u030b\u0309\3\2\2\2")
        buf.write("\u030c\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3")
        buf.write("\2\2\2\u030e\u0310\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u0311")
        buf.write("\7\t\2\2\u0311\u0313\3\2\2\2\u0312\u0306\3\2\2\2\u0313")
        buf.write("\u0316\3\2\2\2\u0314\u0312\3\2\2\2\u0314\u0315\3\2\2\2")
        buf.write("\u0315\u031b\3\2\2\2\u0316\u0314\3\2\2\2\u0317\u031b\5")
        buf.write("B\"\2\u0318\u0319\7=\2\2\u0319\u031b\7\u0096\2\2\u031a")
        buf.write("\u02fb\3\2\2\2\u031a\u0317\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031b\65\3\2\2\2\u031c\u0320\7x\2\2\u031d\u031e\5\u00a4")
        buf.write("S\2\u031e\u031f\7\7\2\2\u031f\u0321\3\2\2\2\u0320\u031d")
        buf.write("\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0329\5\u00bc_\2\u0323\u0324\7\13\2\2\u0324\u032a\5|")
        buf.write("?\2\u0325\u0326\7\b\2\2\u0326\u0327\5|?\2\u0327\u0328")
        buf.write("\7\t\2\2\u0328\u032a\3\2\2\2\u0329\u0323\3\2\2\2\u0329")
        buf.write("\u0325\3\2\2\2\u0329\u032a\3\2\2\2\u032a\67\3\2\2\2\u032b")
        buf.write("\u0336\7\177\2\2\u032c\u0337\5\u00b0Y\2\u032d\u032e\5")
        buf.write("\u00a4S\2\u032e\u032f\7\7\2\2\u032f\u0331\3\2\2\2\u0330")
        buf.write("\u032d\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0334\3\2\2\2")
        buf.write("\u0332\u0335\5\u00a8U\2\u0333\u0335\5\u00b4[\2\u0334\u0332")
        buf.write("\3\2\2\2\u0334\u0333\3\2\2\2\u0335\u0337\3\2\2\2\u0336")
        buf.write("\u032c\3\2\2\2\u0336\u0330\3\2\2\2\u0336\u0337\3\2\2\2")
        buf.write("\u03379\3\2\2\2\u0338\u033a\7\u0080\2\2\u0339\u033b\7")
        buf.write("\u0087\2\2\u033a\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c\u033d\5\u00be`\2\u033d;\3\2\2\2\u033e")
        buf.write("\u0343\7\u0085\2\2\u033f\u0341\7\u008f\2\2\u0340\u0342")
        buf.write("\5\u00c2b\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0344\3\2\2\2\u0343\u033f\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u034a\3\2\2\2\u0345\u0347\7\u008e\2\2\u0346\u0348")
        buf.write("\7\u0087\2\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u034b\5\u00be`\2\u034a\u0345\3\2")
        buf.write("\2\2\u034a\u034b\3\2\2\2\u034b=\3\2\2\2\u034c\u034d\7")
        buf.write("\u0087\2\2\u034d\u034e\5\u00be`\2\u034e?\3\2\2\2\u034f")
        buf.write("\u0351\7\u009b\2\2\u0350\u0352\7|\2\2\u0351\u0350\3\2")
        buf.write("\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0358")
        buf.write("\5~@\2\u0354\u0355\7\n\2\2\u0355\u0357\5~@\2\u0356\u0354")
        buf.write("\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356\3\2\2\2\u0358")
        buf.write("\u0359\3\2\2\2\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2")
        buf.write("\u035b\u034f\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3")
        buf.write("\2\2\2\u035d\u0368\5\u008aF\2\u035e\u035f\7u\2\2\u035f")
        buf.write("\u0360\7-\2\2\u0360\u0365\5z>\2\u0361\u0362\7\n\2\2\u0362")
        buf.write("\u0364\5z>\2\u0363\u0361\3\2\2\2\u0364\u0367\3\2\2\2\u0365")
        buf.write("\u0363\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0369\3\2\2\2")
        buf.write("\u0367\u0365\3\2\2\2\u0368\u035e\3\2\2\2\u0368\u0369\3")
        buf.write("\2\2\2\u0369\u0370\3\2\2\2\u036a\u036b\7h\2\2\u036b\u036e")
        buf.write("\5`\61\2\u036c\u036d\t\4\2\2\u036d\u036f\5`\61\2\u036e")
        buf.write("\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0371\3\2\2\2")
        buf.write("\u0370\u036a\3\2\2\2\u0370\u0371\3\2\2\2\u0371A\3\2\2")
        buf.write("\2\u0372\u0374\7\u009b\2\2\u0373\u0375\7|\2\2\u0374\u0373")
        buf.write("\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u037b\5~@\2\u0377\u0378\7\n\2\2\u0378\u037a\5~@\2\u0379")
        buf.write("\u0377\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037b\u037c\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3")
        buf.write("\2\2\2\u037e\u0372\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380\u0386\5D#\2\u0381\u0382\5\u008cG\2\u0382")
        buf.write("\u0383\5D#\2\u0383\u0385\3\2\2\2\u0384\u0381\3\2\2\2\u0385")
        buf.write("\u0388\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2")
        buf.write("\u0387\u0393\3\2\2\2\u0388\u0386\3\2\2\2\u0389\u038a\7")
        buf.write("u\2\2\u038a\u038b\7-\2\2\u038b\u0390\5z>\2\u038c\u038d")
        buf.write("\7\n\2\2\u038d\u038f\5z>\2\u038e\u038c\3\2\2\2\u038f\u0392")
        buf.write("\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2\2\u0391")
        buf.write("\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0393\u0389\3\2\2\2")
        buf.write("\u0393\u0394\3\2\2\2\u0394\u039b\3\2\2\2\u0395\u0396\7")
        buf.write("h\2\2\u0396\u0399\5`\61\2\u0397\u0398\t\4\2\2\u0398\u039a")
        buf.write("\5`\61\2\u0399\u0397\3\2\2\2\u0399\u039a\3\2\2\2\u039a")
        buf.write("\u039c\3\2\2\2\u039b\u0395\3\2\2\2\u039b\u039c\3\2\2\2")
        buf.write("\u039cC\3\2\2\2\u039d\u039f\7\u0088\2\2\u039e\u03a0\t")
        buf.write("\6\2\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a6\5\u0080A\2\u03a2\u03a3\7\n\2\2\u03a3")
        buf.write("\u03a5\5\u0080A\2\u03a4\u03a2\3\2\2\2\u03a5\u03a8\3\2")
        buf.write("\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03b5")
        buf.write("\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03b3\7Q\2\2\u03aa")
        buf.write("\u03af\5\u0082B\2\u03ab\u03ac\7\n\2\2\u03ac\u03ae\5\u0082")
        buf.write("B\2\u03ad\u03ab\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad")
        buf.write("\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b4\3\2\2\2\u03b1")
        buf.write("\u03af\3\2\2\2\u03b2\u03b4\5\u0084C\2\u03b3\u03aa\3\2")
        buf.write("\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b6\3\2\2\2\u03b5\u03a9")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7")
        buf.write("\u03b8\7\u009a\2\2\u03b8\u03ba\5`\61\2\u03b9\u03b7\3\2")
        buf.write("\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03c9\3\2\2\2\u03bb\u03bc")
        buf.write("\7T\2\2\u03bc\u03bd\7-\2\2\u03bd\u03c2\5`\61\2\u03be\u03bf")
        buf.write("\7\n\2\2\u03bf\u03c1\5`\61\2\u03c0\u03be\3\2\2\2\u03c1")
        buf.write("\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2")
        buf.write("\u03c3\u03c7\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03c6\7")
        buf.write("U\2\2\u03c6\u03c8\5`\61\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03ca\3\2\2\2\u03c9\u03bb\3\2\2\2\u03c9")
        buf.write("\u03ca\3\2\2\2\u03ca\u03e8\3\2\2\2\u03cb\u03cc\7\u0096")
        buf.write("\2\2\u03cc\u03cd\7\b\2\2\u03cd\u03d2\5`\61\2\u03ce\u03cf")
        buf.write("\7\n\2\2\u03cf\u03d1\5`\61\2\u03d0\u03ce\3\2\2\2\u03d1")
        buf.write("\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2")
        buf.write("\u03d3\u03d5\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03e4\7")
        buf.write("\t\2\2\u03d6\u03d7\7\n\2\2\u03d7\u03d8\7\b\2\2\u03d8\u03dd")
        buf.write("\5`\61\2\u03d9\u03da\7\n\2\2\u03da\u03dc\5`\61\2\u03db")
        buf.write("\u03d9\3\2\2\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2")
        buf.write("\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2\u03df\u03dd\3")
        buf.write("\2\2\2\u03e0\u03e1\7\t\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03d6")
        buf.write("\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e4")
        buf.write("\u03e5\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2")
        buf.write("\u03e7\u039d\3\2\2\2\u03e7\u03cb\3\2\2\2\u03e8E\3\2\2")
        buf.write("\2\u03e9\u03eb\5v<\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3")
        buf.write("\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03f7\7\u0093\2\2\u03ed")
        buf.write("\u03ee\7t\2\2\u03ee\u03f8\7\u0085\2\2\u03ef\u03f0\7t\2")
        buf.write("\2\u03f0\u03f8\7\36\2\2\u03f1\u03f2\7t\2\2\u03f2\u03f8")
        buf.write("\7\u0082\2\2\u03f3\u03f4\7t\2\2\u03f4\u03f8\7N\2\2\u03f5")
        buf.write("\u03f6\7t\2\2\u03f6\u03f8\7W\2\2\u03f7\u03ed\3\2\2\2\u03f7")
        buf.write("\u03ef\3\2\2\2\u03f7\u03f1\3\2\2\2\u03f7\u03f3\3\2\2\2")
        buf.write("\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\3")
        buf.write("\2\2\2\u03f9\u03fa\5x=\2\u03fa\u03fb\7\u0089\2\2\u03fb")
        buf.write("\u03fc\5\u00aeX\2\u03fc\u03fd\7\13\2\2\u03fd\u0405\5`")
        buf.write("\61\2\u03fe\u03ff\7\n\2\2\u03ff\u0400\5\u00aeX\2\u0400")
        buf.write("\u0401\7\13\2\2\u0401\u0402\5`\61\2\u0402\u0404\3\2\2")
        buf.write("\2\u0403\u03fe\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403")
        buf.write("\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u040a\3\2\2\2\u0407")
        buf.write("\u0405\3\2\2\2\u0408\u0409\7\u009a\2\2\u0409\u040b\5`")
        buf.write("\61\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040bG\3")
        buf.write("\2\2\2\u040c\u040e\5v<\2\u040d\u040c\3\2\2\2\u040d\u040e")
        buf.write("\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u041a\7\u0093\2\2\u0410")
        buf.write("\u0411\7t\2\2\u0411\u041b\7\u0085\2\2\u0412\u0413\7t\2")
        buf.write("\2\u0413\u041b\7\36\2\2\u0414\u0415\7t\2\2\u0415\u041b")
        buf.write("\7\u0082\2\2\u0416\u0417\7t\2\2\u0417\u041b\7N\2\2\u0418")
        buf.write("\u0419\7t\2\2\u0419\u041b\7W\2\2\u041a\u0410\3\2\2\2\u041a")
        buf.write("\u0412\3\2\2\2\u041a\u0414\3\2\2\2\u041a\u0416\3\2\2\2")
        buf.write("\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3")
        buf.write("\2\2\2\u041c\u041d\5x=\2\u041d\u041e\7\u0089\2\2\u041e")
        buf.write("\u041f\5\u00aeX\2\u041f\u0420\7\13\2\2\u0420\u0428\5`")
        buf.write("\61\2\u0421\u0422\7\n\2\2\u0422\u0423\5\u00aeX\2\u0423")
        buf.write("\u0424\7\13\2\2\u0424\u0425\5`\61\2\u0425\u0427\3\2\2")
        buf.write("\2\u0426\u0421\3\2\2\2\u0427\u042a\3\2\2\2\u0428\u0426")
        buf.write("\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042d\3\2\2\2\u042a")
        buf.write("\u0428\3\2\2\2\u042b\u042c\7\u009a\2\2\u042c\u042e\5`")
        buf.write("\61\2\u042d\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0441")
        buf.write("\3\2\2\2\u042f\u0430\7u\2\2\u0430\u0431\7-\2\2\u0431\u0436")
        buf.write("\5z>\2\u0432\u0433\7\n\2\2\u0433\u0435\5z>\2\u0434\u0432")
        buf.write("\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2\u0436")
        buf.write("\u0437\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2")
        buf.write("\u0439\u042f\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3")
        buf.write("\2\2\2\u043b\u043c\7h\2\2\u043c\u043f\5`\61\2\u043d\u043e")
        buf.write("\t\4\2\2\u043e\u0440\5`\61\2\u043f\u043d\3\2\2\2\u043f")
        buf.write("\u0440\3\2\2\2\u0440\u0442\3\2\2\2\u0441\u0439\3\2\2\2")
        buf.write("\u0441\u0442\3\2\2\2\u0442I\3\2\2\2\u0443\u0444\7\u0095")
        buf.write("\2\2\u0444K\3\2\2\2\u0445\u044a\5\u00aeX\2\u0446\u0449")
        buf.write("\5P)\2\u0447\u0449\5N(\2\u0448\u0446\3\2\2\2\u0448\u0447")
        buf.write("\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a")
        buf.write("\u044b\3\2\2\2\u044bM\3\2\2\2\u044c\u044a\3\2\2\2\u044d")
        buf.write("\u0461\5\u00a0Q\2\u044e\u044f\7\b\2\2\u044f\u0451\5\u0090")
        buf.write("I\2\u0450\u0452\5\u00c4c\2\u0451\u0450\3\2\2\2\u0451\u0452")
        buf.write("\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\7\t\2\2\u0454")
        buf.write("\u0462\3\2\2\2\u0455\u0456\7\b\2\2\u0456\u0458\5\u0090")
        buf.write("I\2\u0457\u0459\5\u00c4c\2\u0458\u0457\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\7\n\2\2\u045b")
        buf.write("\u045d\5\u0090I\2\u045c\u045e\5\u00c4c\2\u045d\u045c\3")
        buf.write("\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460")
        buf.write("\7\t\2\2\u0460\u0462\3\2\2\2\u0461\u044e\3\2\2\2\u0461")
        buf.write("\u0455\3\2\2\2\u0461\u0462\3\2\2\2\u0462O\3\2\2\2\u0463")
        buf.write("\u0464\7\66\2\2\u0464\u0466\5\u00a0Q\2\u0465\u0463\3\2")
        buf.write("\2\2\u0465\u0466\3\2\2\2\u0466\u0475\3\2\2\2\u0467\u0476")
        buf.write("\5R*\2\u0468\u0476\5T+\2\u0469\u0476\5V,\2\u046a\u0476")
        buf.write("\5X-\2\u046b\u046c\7\u0092\2\2\u046c\u0476\5^\60\2\u046d")
        buf.write("\u046e\7\61\2\2\u046e\u046f\7\b\2\2\u046f\u0470\5`\61")
        buf.write("\2\u0470\u0471\7\t\2\2\u0471\u0476\3\2\2\2\u0472\u0476")
        buf.write("\5Z.\2\u0473\u0474\7\62\2\2\u0474\u0476\5\u00b0Y\2\u0475")
        buf.write("\u0467\3\2\2\2\u0475\u0468\3\2\2\2\u0475\u0469\3\2\2\2")
        buf.write("\u0475\u046a\3\2\2\2\u0475\u046b\3\2\2\2\u0475\u046d\3")
        buf.write("\2\2\2\u0475\u0472\3\2\2\2\u0475\u0473\3\2\2\2\u0476Q")
        buf.write("\3\2\2\2\u0477\u0478\7y\2\2\u0478\u047a\7e\2\2\u0479\u047b")
        buf.write("\t\7\2\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b")
        buf.write("\u047c\3\2\2\2\u047c\u047e\5^\60\2\u047d\u047f\7)\2\2")
        buf.write("\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047fS\3\2\2")
        buf.write("\2\u0480\u0481\5b\62\2\u0481U\3\2\2\2\u0482\u0483\7m\2")
        buf.write("\2\u0483\u0484\7o\2\2\u0484\u0485\5^\60\2\u0485W\3\2\2")
        buf.write("\2\u0486\u0487\7o\2\2\u0487\u0488\5^\60\2\u0488Y\3\2\2")
        buf.write("\2\u0489\u0495\7=\2\2\u048a\u0496\5\\/\2\u048b\u048c\7")
        buf.write("\b\2\2\u048c\u048d\5`\61\2\u048d\u048e\7\t\2\2\u048e\u0496")
        buf.write("\3\2\2\2\u048f\u0490\7k\2\2\u0490\u0491\7\b\2\2\u0491")
        buf.write("\u0492\5`\61\2\u0492\u0493\7\t\2\2\u0493\u0496\3\2\2\2")
        buf.write("\u0494\u0496\5\u00c4c\2\u0495\u048a\3\2\2\2\u0495\u048b")
        buf.write("\3\2\2\2\u0495\u048f\3\2\2\2\u0495\u0494\3\2\2\2\u0496")
        buf.write("\u049d\3\2\2\2\u0497\u0499\7\3\2\2\u0498\u049a\5\u00c4")
        buf.write("c\2\u0499\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u0499")
        buf.write("\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049e\3\2\2\2\u049d")
        buf.write("\u0497\3\2\2\2\u049d\u049e\3\2\2\2\u049e[\3\2\2\2\u049f")
        buf.write("\u04a2\5\u0090I\2\u04a0\u04a2\5\u0092J\2\u04a1\u049f\3")
        buf.write("\2\2\2\u04a1\u04a0\3\2\2\2\u04a2]\3\2\2\2\u04a3\u04a4")
        buf.write("\7r\2\2\u04a4\u04a5\7\65\2\2\u04a5\u04a7\t\b\2\2\u04a6")
        buf.write("\u04a3\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7_\3\2\2\2\u04a8")
        buf.write("\u04a9\b\61\1\2\u04a9\u04f5\5\u0092J\2\u04aa\u04f5\7\u009f")
        buf.write("\2\2\u04ab\u04ac\5\u00a4S\2\u04ac\u04ad\7\7\2\2\u04ad")
        buf.write("\u04af\3\2\2\2\u04ae\u04ab\3\2\2\2\u04ae\u04af\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u04b1\5\u00a8U\2\u04b1\u04b2")
        buf.write("\7\7\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04ae\3\2\2\2\u04b3")
        buf.write("\u04b4\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04f5\5\u00ae")
        buf.write("X\2\u04b6\u04b7\5\u0094K\2\u04b7\u04b8\5`\61\27\u04b8")
        buf.write("\u04f5\3\2\2\2\u04b9\u04ba\5\u00a2R\2\u04ba\u04c7\7\b")
        buf.write("\2\2\u04bb\u04bd\7C\2\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd")
        buf.write("\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c3\5`\61\2\u04bf")
        buf.write("\u04c0\7\n\2\2\u04c0\u04c2\5`\61\2\u04c1\u04bf\3\2\2\2")
        buf.write("\u04c2\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3")
        buf.write("\2\2\2\u04c4\u04c8\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04c8")
        buf.write("\7\f\2\2\u04c7\u04bc\3\2\2\2\u04c7\u04c6\3\2\2\2\u04c7")
        buf.write("\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca\7\t\2\2")
        buf.write("\u04ca\u04f5\3\2\2\2\u04cb\u04cc\7\b\2\2\u04cc\u04cd\5")
        buf.write("`\61\2\u04cd\u04ce\7\t\2\2\u04ce\u04f5\3\2\2\2\u04cf\u04d0")
        buf.write("\7\60\2\2\u04d0\u04d1\7\b\2\2\u04d1\u04d2\5`\61\2\u04d2")
        buf.write("\u04d3\7&\2\2\u04d3\u04d4\5N(\2\u04d4\u04d5\7\t\2\2\u04d5")
        buf.write("\u04f5\3\2\2\2\u04d6\u04d8\7m\2\2\u04d7\u04d6\3\2\2\2")
        buf.write("\u04d7\u04d8\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db\7")
        buf.write("L\2\2\u04da\u04d7\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc")
        buf.write("\3\2\2\2\u04dc\u04dd\7\b\2\2\u04dd\u04de\5B\"\2\u04de")
        buf.write("\u04df\7\t\2\2\u04df\u04f5\3\2\2\2\u04e0\u04e2\7/\2\2")
        buf.write("\u04e1\u04e3\5`\61\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3")
        buf.write("\2\2\2\u04e3\u04e9\3\2\2\2\u04e4\u04e5\7\u0099\2\2\u04e5")
        buf.write("\u04e6\5`\61\2\u04e6\u04e7\7\u008d\2\2\u04e7\u04e8\5`")
        buf.write("\61\2\u04e8\u04ea\3\2\2\2\u04e9\u04e4\3\2\2\2\u04ea\u04eb")
        buf.write("\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec")
        buf.write("\u04ef\3\2\2\2\u04ed\u04ee\7F\2\2\u04ee\u04f0\5`\61\2")
        buf.write("\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f1\3")
        buf.write("\2\2\2\u04f1\u04f2\7G\2\2\u04f2\u04f5\3\2\2\2\u04f3\u04f5")
        buf.write("\5f\64\2\u04f4\u04a8\3\2\2\2\u04f4\u04aa\3\2\2\2\u04f4")
        buf.write("\u04b3\3\2\2\2\u04f4\u04b6\3\2\2\2\u04f4\u04b9\3\2\2\2")
        buf.write("\u04f4\u04cb\3\2\2\2\u04f4\u04cf\3\2\2\2\u04f4\u04da\3")
        buf.write("\2\2\2\u04f4\u04e0\3\2\2\2\u04f4\u04f3\3\2\2\2\u04f5\u055a")
        buf.write("\3\2\2\2\u04f6\u04f7\f\26\2\2\u04f7\u04f8\7\20\2\2\u04f8")
        buf.write("\u0559\5`\61\27\u04f9\u04fa\f\25\2\2\u04fa\u04fb\t\t\2")
        buf.write("\2\u04fb\u0559\5`\61\26\u04fc\u04fd\f\24\2\2\u04fd\u04fe")
        buf.write("\t\n\2\2\u04fe\u0559\5`\61\25\u04ff\u0500\f\23\2\2\u0500")
        buf.write("\u0501\t\13\2\2\u0501\u0559\5`\61\24\u0502\u0503\f\22")
        buf.write("\2\2\u0503\u0504\t\f\2\2\u0504\u0559\5`\61\23\u0505\u0512")
        buf.write("\f\21\2\2\u0506\u0513\7\13\2\2\u0507\u0513\7\33\2\2\u0508")
        buf.write("\u0513\7\34\2\2\u0509\u0513\7\35\2\2\u050a\u0513\7b\2")
        buf.write("\2\u050b\u050c\7b\2\2\u050c\u0513\7m\2\2\u050d\u0513\7")
        buf.write("Y\2\2\u050e\u0513\7g\2\2\u050f\u0513\7S\2\2\u0510\u0513")
        buf.write("\7i\2\2\u0511\u0513\7~\2\2\u0512\u0506\3\2\2\2\u0512\u0507")
        buf.write("\3\2\2\2\u0512\u0508\3\2\2\2\u0512\u0509\3\2\2\2\u0512")
        buf.write("\u050a\3\2\2\2\u0512\u050b\3\2\2\2\u0512\u050d\3\2\2\2")
        buf.write("\u0512\u050e\3\2\2\2\u0512\u050f\3\2\2\2\u0512\u0510\3")
        buf.write("\2\2\2\u0512\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0559")
        buf.write("\5`\61\22\u0515\u0516\f\20\2\2\u0516\u0517\7%\2\2\u0517")
        buf.write("\u0559\5`\61\21\u0518\u0519\f\17\2\2\u0519\u051a\7t\2")
        buf.write("\2\u051a\u0559\5`\61\20\u051b\u051c\f\b\2\2\u051c\u051e")
        buf.write("\7b\2\2\u051d\u051f\7m\2\2\u051e\u051d\3\2\2\2\u051e\u051f")
        buf.write("\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0559\5`\61\t\u0521")
        buf.write("\u0523\f\7\2\2\u0522\u0524\7m\2\2\u0523\u0522\3\2\2\2")
        buf.write("\u0523\u0524\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\7")
        buf.write(",\2\2\u0526\u0527\5`\61\2\u0527\u0528\7%\2\2\u0528\u0529")
        buf.write("\5`\61\b\u0529\u0559\3\2\2\2\u052a\u052b\f\13\2\2\u052b")
        buf.write("\u052c\7\62\2\2\u052c\u0559\5\u00b0Y\2\u052d\u052f\f\n")
        buf.write("\2\2\u052e\u0530\7m\2\2\u052f\u052e\3\2\2\2\u052f\u0530")
        buf.write("\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0532\t\r\2\2\u0532")
        buf.write("\u0535\5`\61\2\u0533\u0534\7I\2\2\u0534\u0536\5`\61\2")
        buf.write("\u0535\u0533\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0559\3")
        buf.write("\2\2\2\u0537\u053c\f\t\2\2\u0538\u053d\7c\2\2\u0539\u053d")
        buf.write("\7n\2\2\u053a\u053b\7m\2\2\u053b\u053d\7o\2\2\u053c\u0538")
        buf.write("\3\2\2\2\u053c\u0539\3\2\2\2\u053c\u053a\3\2\2\2\u053d")
        buf.write("\u0559\3\2\2\2\u053e\u0540\f\6\2\2\u053f\u0541\7m\2\2")
        buf.write("\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0542\3")
        buf.write("\2\2\2\u0542\u0556\7Y\2\2\u0543\u054d\7\b\2\2\u0544\u054e")
        buf.write("\5B\"\2\u0545\u054a\5`\61\2\u0546\u0547\7\n\2\2\u0547")
        buf.write("\u0549\5`\61\2\u0548\u0546\3\2\2\2\u0549\u054c\3\2\2\2")
        buf.write("\u054a\u0548\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054e\3")
        buf.write("\2\2\2\u054c\u054a\3\2\2\2\u054d\u0544\3\2\2\2\u054d\u0545")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f\3\2\2\2\u054f")
        buf.write("\u0557\7\t\2\2\u0550\u0551\5\u00a4S\2\u0551\u0552\7\7")
        buf.write("\2\2\u0552\u0554\3\2\2\2\u0553\u0550\3\2\2\2\u0553\u0554")
        buf.write("\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0557\5\u00a8U\2\u0556")
        buf.write("\u0543\3\2\2\2\u0556\u0553\3\2\2\2\u0557\u0559\3\2\2\2")
        buf.write("\u0558\u04f6\3\2\2\2\u0558\u04f9\3\2\2\2\u0558\u04fc\3")
        buf.write("\2\2\2\u0558\u04ff\3\2\2\2\u0558\u0502\3\2\2\2\u0558\u0505")
        buf.write("\3\2\2\2\u0558\u0515\3\2\2\2\u0558\u0518\3\2\2\2\u0558")
        buf.write("\u051b\3\2\2\2\u0558\u0521\3\2\2\2\u0558\u052a\3\2\2\2")
        buf.write("\u0558\u052d\3\2\2\2\u0558\u0537\3\2\2\2\u0558\u053e\3")
        buf.write("\2\2\2\u0559\u055c\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u055b")
        buf.write("\3\2\2\2\u055ba\3\2\2\2\u055c\u055a\3\2\2\2\u055d\u0561")
        buf.write("\7}\2\2\u055e\u055f\5\u00a4S\2\u055f\u0560\7\7\2\2\u0560")
        buf.write("\u0562\3\2\2\2\u0561\u055e\3\2\2\2\u0561\u0562\3\2\2\2")
        buf.write("\u0562\u0563\3\2\2\2\u0563\u056f\5\u00b2Z\2\u0564\u0565")
        buf.write("\7\b\2\2\u0565\u056a\5d\63\2\u0566\u0567\7\n\2\2\u0567")
        buf.write("\u0569\5d\63\2\u0568\u0566\3\2\2\2\u0569\u056c\3\2\2\2")
        buf.write("\u056a\u0568\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\3")
        buf.write("\2\2\2\u056c\u056a\3\2\2\2\u056d\u056e\7\t\2\2\u056e\u0570")
        buf.write("\3\2\2\2\u056f\u0564\3\2\2\2\u056f\u0570\3\2\2\2\u0570")
        buf.write("\u0583\3\2\2\2\u0571\u0572\7r\2\2\u0572\u057b\t\16\2\2")
        buf.write("\u0573\u0574\7\u0089\2\2\u0574\u057c\7o\2\2\u0575\u0576")
        buf.write("\7\u0089\2\2\u0576\u057c\7=\2\2\u0577\u057c\7.\2\2\u0578")
        buf.write("\u057c\7\u0083\2\2\u0579\u057a\7l\2\2\u057a\u057c\7\37")
        buf.write("\2\2\u057b\u0573\3\2\2\2\u057b\u0575\3\2\2\2\u057b\u0577")
        buf.write("\3\2\2\2\u057b\u0578\3\2\2\2\u057b\u0579\3\2\2\2\u057c")
        buf.write("\u0580\3\2\2\2\u057d\u057e\7i\2\2\u057e\u0580\5\u00a0")
        buf.write("Q\2\u057f\u0571\3\2\2\2\u057f\u057d\3\2\2\2\u0580\u0582")
        buf.write("\3\2\2\2\u0581\u057f\3\2\2\2\u0582\u0585\3\2\2\2\u0583")
        buf.write("\u0581\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0593\3\2\2\2")
        buf.write("\u0585\u0583\3\2\2\2\u0586\u0588\7m\2\2\u0587\u0586\3")
        buf.write("\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058e")
        buf.write("\7>\2\2\u058a\u058b\7\\\2\2\u058b\u058f\7?\2\2\u058c\u058d")
        buf.write("\7\\\2\2\u058d\u058f\7X\2\2\u058e\u058a\3\2\2\2\u058e")
        buf.write("\u058c\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0591\3\2\2\2")
        buf.write("\u0590\u0592\7H\2\2\u0591\u0590\3\2\2\2\u0591\u0592\3")
        buf.write("\2\2\2\u0592\u0594\3\2\2\2\u0593\u0587\3\2\2\2\u0593\u0594")
        buf.write("\3\2\2\2\u0594c\3\2\2\2\u0595\u0596\5\u00a0Q\2\u0596e")
        buf.write("\3\2\2\2\u0597\u0598\7{\2\2\u0598\u059d\7\b\2\2\u0599")
        buf.write("\u059e\7W\2\2\u059a\u059b\t\17\2\2\u059b\u059c\7\n\2\2")
        buf.write("\u059c\u059e\5\u0096L\2\u059d\u0599\3\2\2\2\u059d\u059a")
        buf.write("\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\7\t\2\2\u05a0")
        buf.write("g\3\2\2\2\u05a1\u05a4\5\u00aeX\2\u05a2\u05a3\7\62\2\2")
        buf.write("\u05a3\u05a5\5\u00b0Y\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5")
        buf.write("\3\2\2\2\u05a5\u05a7\3\2\2\2\u05a6\u05a8\t\7\2\2\u05a7")
        buf.write("\u05a6\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8i\3\2\2\2\u05a9")
        buf.write("\u05aa\7\66\2\2\u05aa\u05ac\5\u00a0Q\2\u05ab\u05a9\3\2")
        buf.write("\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05b6\3\2\2\2\u05ad\u05b7")
        buf.write("\5l\67\2\u05ae\u05b7\5r:\2\u05af\u05b7\5p9\2\u05b0\u05b1")
        buf.write("\7\61\2\2\u05b1\u05b2\7\b\2\2\u05b2\u05b3\5`\61\2\u05b3")
        buf.write("\u05b4\7\t\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b7\5n8\2\u05b6")
        buf.write("\u05ad\3\2\2\2\u05b6\u05ae\3\2\2\2\u05b6\u05af\3\2\2\2")
        buf.write("\u05b6\u05b0\3\2\2\2\u05b6\u05b5\3\2\2\2\u05b7k\3\2\2")
        buf.write("\2\u05b8\u05b9\7y\2\2\u05b9\u05ba\7e\2\2\u05ba\u05bb\7")
        buf.write("\b\2\2\u05bb\u05c0\5h\65\2\u05bc\u05bd\7\n\2\2\u05bd\u05bf")
        buf.write("\5h\65\2\u05be\u05bc\3\2\2\2\u05bf\u05c2\3\2\2\2\u05c0")
        buf.write("\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c3\3\2\2\2")
        buf.write("\u05c2\u05c0\3\2\2\2\u05c3\u05c4\7\t\2\2\u05c4\u05c5\5")
        buf.write("^\60\2\u05c5m\3\2\2\2\u05c6\u05c7\7P\2\2\u05c7\u05c8\7")
        buf.write("e\2\2\u05c8\u05c9\7\b\2\2\u05c9\u05ce\5t;\2\u05ca\u05cb")
        buf.write("\7\n\2\2\u05cb\u05cd\5t;\2\u05cc\u05ca\3\2\2\2\u05cd\u05d0")
        buf.write("\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf")
        buf.write("\u05d1\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1\u05d2\7\t\2\2")
        buf.write("\u05d2\u05d3\5b\62\2\u05d3o\3\2\2\2\u05d4\u05d6\7\u0092")
        buf.write("\2\2\u05d5\u05d7\7e\2\2\u05d6\u05d5\3\2\2\2\u05d6\u05d7")
        buf.write("\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05da\5\u00a0Q\2\u05d9")
        buf.write("\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05db\3\2\2\2")
        buf.write("\u05db\u05dc\7\b\2\2\u05dc\u05e1\5h\65\2\u05dd\u05de\7")
        buf.write("\n\2\2\u05de\u05e0\5h\65\2\u05df\u05dd\3\2\2\2\u05e0\u05e3")
        buf.write("\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2")
        buf.write("\u05e4\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4\u05e5\7\t\2\2")
        buf.write("\u05e5\u05e6\5^\60\2\u05e6q\3\2\2\2\u05e7\u05e9\7e\2\2")
        buf.write("\u05e8\u05ea\5\u00a0Q\2\u05e9\u05e8\3\2\2\2\u05e9\u05ea")
        buf.write("\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ec\7\b\2\2\u05ec")
        buf.write("\u05f1\5h\65\2\u05ed\u05ee\7\n\2\2\u05ee\u05f0\5h\65\2")
        buf.write("\u05ef\u05ed\3\2\2\2\u05f0\u05f3\3\2\2\2\u05f1\u05ef\3")
        buf.write("\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f4\3\2\2\2\u05f3\u05f1")
        buf.write("\3\2\2\2\u05f4\u05f5\7\t\2\2\u05f5\u05f6\5^\60\2\u05f6")
        buf.write("s\3\2\2\2\u05f7\u05f8\5\u00aeX\2\u05f8u\3\2\2\2\u05f9")
        buf.write("\u05fb\7\u009b\2\2\u05fa\u05fc\7|\2\2\u05fb\u05fa\3\2")
        buf.write("\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe")
        buf.write("\5\u008eH\2\u05fe\u05ff\7&\2\2\u05ff\u0600\7\b\2\2\u0600")
        buf.write("\u0601\5B\"\2\u0601\u060b\7\t\2\2\u0602\u0603\7\n\2\2")
        buf.write("\u0603\u0604\5\u008eH\2\u0604\u0605\7&\2\2\u0605\u0606")
        buf.write("\7\b\2\2\u0606\u0607\5B\"\2\u0607\u0608\7\t\2\2\u0608")
        buf.write("\u060a\3\2\2\2\u0609\u0602\3\2\2\2\u060a\u060d\3\2\2\2")
        buf.write("\u060b\u0609\3\2\2\2\u060b\u060c\3\2\2\2\u060cw\3\2\2")
        buf.write("\2\u060d\u060b\3\2\2\2\u060e\u060f\5\u00a4S\2\u060f\u0610")
        buf.write("\7\7\2\2\u0610\u0612\3\2\2\2\u0611\u060e\3\2\2\2\u0611")
        buf.write("\u0612\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0619\5\u00a8")
        buf.write("U\2\u0614\u0615\7[\2\2\u0615\u0616\7-\2\2\u0616\u061a")
        buf.write("\5\u00b4[\2\u0617\u0618\7m\2\2\u0618\u061a\7[\2\2\u0619")
        buf.write("\u0614\3\2\2\2\u0619\u0617\3\2\2\2\u0619\u061a\3\2\2\2")
        buf.write("\u061ay\3\2\2\2\u061b\u061e\5`\61\2\u061c\u061d\7\62\2")
        buf.write("\2\u061d\u061f\5\u00b0Y\2\u061e\u061c\3\2\2\2\u061e\u061f")
        buf.write("\3\2\2\2\u061f\u0621\3\2\2\2\u0620\u0622\t\7\2\2\u0621")
        buf.write("\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622{\3\2\2\2\u0623")
        buf.write("\u0627\5\u0090I\2\u0624\u0627\5\u00a0Q\2\u0625\u0627\7")
        buf.write("\u00a0\2\2\u0626\u0623\3\2\2\2\u0626\u0624\3\2\2\2\u0626")
        buf.write("\u0625\3\2\2\2\u0627}\3\2\2\2\u0628\u0634\5\u00a8U\2\u0629")
        buf.write("\u062a\7\b\2\2\u062a\u062f\5\u00aeX\2\u062b\u062c\7\n")
        buf.write("\2\2\u062c\u062e\5\u00aeX\2\u062d\u062b\3\2\2\2\u062e")
        buf.write("\u0631\3\2\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3\2\2\2")
        buf.write("\u0630\u0632\3\2\2\2\u0631\u062f\3\2\2\2\u0632\u0633\7")
        buf.write("\t\2\2\u0633\u0635\3\2\2\2\u0634\u0629\3\2\2\2\u0634\u0635")
        buf.write("\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\7&\2\2\u0637")
        buf.write("\u0638\7\b\2\2\u0638\u0639\5B\"\2\u0639\u063a\7\t\2\2")
        buf.write("\u063a\177\3\2\2\2\u063b\u0648\7\f\2\2\u063c\u063d\5\u00a8")
        buf.write("U\2\u063d\u063e\7\7\2\2\u063e\u063f\7\f\2\2\u063f\u0648")
        buf.write("\3\2\2\2\u0640\u0645\5`\61\2\u0641\u0643\7&\2\2\u0642")
        buf.write("\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0644\3\2\2\2")
        buf.write("\u0644\u0646\5\u009aN\2\u0645\u0642\3\2\2\2\u0645\u0646")
        buf.write("\3\2\2\2\u0646\u0648\3\2\2\2\u0647\u063b\3\2\2\2\u0647")
        buf.write("\u063c\3\2\2\2\u0647\u0640\3\2\2\2\u0648\u0081\3\2\2\2")
        buf.write("\u0649\u064a\5\u00a4S\2\u064a\u064b\7\7\2\2\u064b\u064d")
        buf.write("\3\2\2\2\u064c\u0649\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u064e\3\2\2\2\u064e\u0653\5\u00a8U\2\u064f\u0651\7&\2")
        buf.write("\2\u0650\u064f\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652")
        buf.write("\3\2\2\2\u0652\u0654\5\u00c0a\2\u0653\u0650\3\2\2\2\u0653")
        buf.write("\u0654\3\2\2\2\u0654\u065a\3\2\2\2\u0655\u0656\7[\2\2")
        buf.write("\u0656\u0657\7-\2\2\u0657\u065b\5\u00b4[\2\u0658\u0659")
        buf.write("\7m\2\2\u0659\u065b\7[\2\2\u065a\u0655\3\2\2\2\u065a\u0658")
        buf.write("\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u0679\3\2\2\2\u065c")
        buf.write("\u0666\7\b\2\2\u065d\u0662\5\u0082B\2\u065e\u065f\7\n")
        buf.write("\2\2\u065f\u0661\5\u0082B\2\u0660\u065e\3\2\2\2\u0661")
        buf.write("\u0664\3\2\2\2\u0662\u0660\3\2\2\2\u0662\u0663\3\2\2\2")
        buf.write("\u0663\u0667\3\2\2\2\u0664\u0662\3\2\2\2\u0665\u0667\5")
        buf.write("\u0084C\2\u0666\u065d\3\2\2\2\u0666\u0665\3\2\2\2\u0667")
        buf.write("\u0668\3\2\2\2\u0668\u066d\7\t\2\2\u0669\u066b\7&\2\2")
        buf.write("\u066a\u0669\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\3")
        buf.write("\2\2\2\u066c\u066e\5\u00c0a\2\u066d\u066a\3\2\2\2\u066d")
        buf.write("\u066e\3\2\2\2\u066e\u0679\3\2\2\2\u066f\u0670\7\b\2\2")
        buf.write("\u0670\u0671\5B\"\2\u0671\u0676\7\t\2\2\u0672\u0674\7")
        buf.write("&\2\2\u0673\u0672\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0675")
        buf.write("\3\2\2\2\u0675\u0677\5\u00c0a\2\u0676\u0673\3\2\2\2\u0676")
        buf.write("\u0677\3\2\2\2\u0677\u0679\3\2\2\2\u0678\u064c\3\2\2\2")
        buf.write("\u0678\u065c\3\2\2\2\u0678\u066f\3\2\2\2\u0679\u0083\3")
        buf.write("\2\2\2\u067a\u0681\5\u0082B\2\u067b\u067c\5\u0086D\2\u067c")
        buf.write("\u067d\5\u0082B\2\u067d\u067e\5\u0088E\2\u067e\u0680\3")
        buf.write("\2\2\2\u067f\u067b\3\2\2\2\u0680\u0683\3\2\2\2\u0681\u067f")
        buf.write("\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0085\3\2\2\2\u0683")
        buf.write("\u0681\3\2\2\2\u0684\u0692\7\n\2\2\u0685\u0687\7j\2\2")
        buf.write("\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u068e\3")
        buf.write("\2\2\2\u0688\u068a\7f\2\2\u0689\u068b\7v\2\2\u068a\u0689")
        buf.write("\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068f\3\2\2\2\u068c")
        buf.write("\u068f\7]\2\2\u068d\u068f\78\2\2\u068e\u0688\3\2\2\2\u068e")
        buf.write("\u068c\3\2\2\2\u068e\u068d\3\2\2\2\u068e\u068f\3\2\2\2")
        buf.write("\u068f\u0690\3\2\2\2\u0690\u0692\7d\2\2\u0691\u0684\3")
        buf.write("\2\2\2\u0691\u0686\3\2\2\2\u0692\u0087\3\2\2\2\u0693\u0694")
        buf.write("\7r\2\2\u0694\u06a2\5`\61\2\u0695\u0696\7\u0094\2\2\u0696")
        buf.write("\u0697\7\b\2\2\u0697\u069c\5\u00aeX\2\u0698\u0699\7\n")
        buf.write("\2\2\u0699\u069b\5\u00aeX\2\u069a\u0698\3\2\2\2\u069b")
        buf.write("\u069e\3\2\2\2\u069c\u069a\3\2\2\2\u069c\u069d\3\2\2\2")
        buf.write("\u069d\u069f\3\2\2\2\u069e\u069c\3\2\2\2\u069f\u06a0\7")
        buf.write("\t\2\2\u06a0\u06a2\3\2\2\2\u06a1\u0693\3\2\2\2\u06a1\u0695")
        buf.write("\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u0089\3\2\2\2\u06a3")
        buf.write("\u06a5\7\u0088\2\2\u06a4\u06a6\t\6\2\2\u06a5\u06a4\3\2")
        buf.write("\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06ac")
        buf.write("\5\u0080A\2\u06a8\u06a9\7\n\2\2\u06a9\u06ab\5\u0080A\2")
        buf.write("\u06aa\u06a8\3\2\2\2\u06ab\u06ae\3\2\2\2\u06ac\u06aa\3")
        buf.write("\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06bb\3\2\2\2\u06ae\u06ac")
        buf.write("\3\2\2\2\u06af\u06b9\7Q\2\2\u06b0\u06b5\5\u0082B\2\u06b1")
        buf.write("\u06b2\7\n\2\2\u06b2\u06b4\5\u0082B\2\u06b3\u06b1\3\2")
        buf.write("\2\2\u06b4\u06b7\3\2\2\2\u06b5\u06b3\3\2\2\2\u06b5\u06b6")
        buf.write("\3\2\2\2\u06b6\u06ba\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b8")
        buf.write("\u06ba\5\u0084C\2\u06b9\u06b0\3\2\2\2\u06b9\u06b8\3\2")
        buf.write("\2\2\u06ba\u06bc\3\2\2\2\u06bb\u06af\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd\u06be\7\u009a\2\2\u06be")
        buf.write("\u06c0\5`\61\2\u06bf\u06bd\3\2\2\2\u06bf\u06c0\3\2\2\2")
        buf.write("\u06c0\u06cf\3\2\2\2\u06c1\u06c2\7T\2\2\u06c2\u06c3\7")
        buf.write("-\2\2\u06c3\u06c8\5`\61\2\u06c4\u06c5\7\n\2\2\u06c5\u06c7")
        buf.write("\5`\61\2\u06c6\u06c4\3\2\2\2\u06c7\u06ca\3\2\2\2\u06c8")
        buf.write("\u06c6\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06cd\3\2\2\2")
        buf.write("\u06ca\u06c8\3\2\2\2\u06cb\u06cc\7U\2\2\u06cc\u06ce\5")
        buf.write("`\61\2\u06cd\u06cb\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d0")
        buf.write("\3\2\2\2\u06cf\u06c1\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0")
        buf.write("\u06ee\3\2\2\2\u06d1\u06d2\7\u0096\2\2\u06d2\u06d3\7\b")
        buf.write("\2\2\u06d3\u06d8\5`\61\2\u06d4\u06d5\7\n\2\2\u06d5\u06d7")
        buf.write("\5`\61\2\u06d6\u06d4\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8")
        buf.write("\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3\2\2\2")
        buf.write("\u06da\u06d8\3\2\2\2\u06db\u06ea\7\t\2\2\u06dc\u06dd\7")
        buf.write("\n\2\2\u06dd\u06de\7\b\2\2\u06de\u06e3\5`\61\2\u06df\u06e0")
        buf.write("\7\n\2\2\u06e0\u06e2\5`\61\2\u06e1\u06df\3\2\2\2\u06e2")
        buf.write("\u06e5\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2")
        buf.write("\u06e4\u06e6\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06e7\7")
        buf.write("\t\2\2\u06e7\u06e9\3\2\2\2\u06e8\u06dc\3\2\2\2\u06e9\u06ec")
        buf.write("\3\2\2\2\u06ea\u06e8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb")
        buf.write("\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ed\u06a3\3\2\2\2")
        buf.write("\u06ed\u06d1\3\2\2\2\u06ee\u008b\3\2\2\2\u06ef\u06f5\7")
        buf.write("\u0091\2\2\u06f0\u06f1\7\u0091\2\2\u06f1\u06f5\7\"\2\2")
        buf.write("\u06f2\u06f5\7`\2\2\u06f3\u06f5\7J\2\2\u06f4\u06ef\3\2")
        buf.write("\2\2\u06f4\u06f0\3\2\2\2\u06f4\u06f2\3\2\2\2\u06f4\u06f3")
        buf.write("\3\2\2\2\u06f5\u008d\3\2\2\2\u06f6\u0702\5\u00a8U\2\u06f7")
        buf.write("\u06f8\7\b\2\2\u06f8\u06fd\5\u00aeX\2\u06f9\u06fa\7\n")
        buf.write("\2\2\u06fa\u06fc\5\u00aeX\2\u06fb\u06f9\3\2\2\2\u06fc")
        buf.write("\u06ff\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fd\u06fe\3\2\2\2")
        buf.write("\u06fe\u0700\3\2\2\2\u06ff\u06fd\3\2\2\2\u0700\u0701\7")
        buf.write("\t\2\2\u0701\u0703\3\2\2\2\u0702\u06f7\3\2\2\2\u0702\u0703")
        buf.write("\3\2\2\2\u0703\u008f\3\2\2\2\u0704\u0706\t\n\2\2\u0705")
        buf.write("\u0704\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707\3\2\2\2")
        buf.write("\u0707\u070a\7\u009e\2\2\u0708\u070a\7\f\2\2\u0709\u0705")
        buf.write("\3\2\2\2\u0709\u0708\3\2\2\2\u070a\u0091\3\2\2\2\u070b")
        buf.write("\u070c\t\20\2\2\u070c\u0093\3\2\2\2\u070d\u070e\t\21\2")
        buf.write("\2\u070e\u0095\3\2\2\2\u070f\u0710\7\u00a0\2\2\u0710\u0097")
        buf.write("\3\2\2\2\u0711\u0714\5`\61\2\u0712\u0714\5L\'\2\u0713")
        buf.write("\u0711\3\2\2\2\u0713\u0712\3\2\2\2\u0714\u0099\3\2\2\2")
        buf.write("\u0715\u0716\t\22\2\2\u0716\u009b\3\2\2\2\u0717\u0718")
        buf.write("\t\23\2\2\u0718\u009d\3\2\2\2\u0719\u071b\13\2\2\2\u071a")
        buf.write("\u0719\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071a\3\2\2\2")
        buf.write("\u071c\u071d\3\2\2\2\u071d\u009f\3\2\2\2\u071e\u071f\5")
        buf.write("\u00c4c\2\u071f\u00a1\3\2\2\2\u0720\u0721\5\u00c4c\2\u0721")
        buf.write("\u00a3\3\2\2\2\u0722\u0723\5\u00c4c\2\u0723\u00a5\3\2")
        buf.write("\2\2\u0724\u0725\5\u00c4c\2\u0725\u00a7\3\2\2\2\u0726")
        buf.write("\u0727\5\u00c4c\2\u0727\u00a9\3\2\2\2\u0728\u0729\5\u00c4")
        buf.write("c\2\u0729\u00ab\3\2\2\2\u072a\u072b\5\u00c4c\2\u072b\u00ad")
        buf.write("\3\2\2\2\u072c\u072d\5\u00c4c\2\u072d\u00af\3\2\2\2\u072e")
        buf.write("\u072f\5\u00c4c\2\u072f\u00b1\3\2\2\2\u0730\u0731\5\u00c4")
        buf.write("c\2\u0731\u00b3\3\2\2\2\u0732\u0733\5\u00c4c\2\u0733\u00b5")
        buf.write("\3\2\2\2\u0734\u0735\5\u00c4c\2\u0735\u00b7\3\2\2\2\u0736")
        buf.write("\u0737\5\u00c4c\2\u0737\u00b9\3\2\2\2\u0738\u0739\5\u00c4")
        buf.write("c\2\u0739\u00bb\3\2\2\2\u073a\u073b\5\u00c4c\2\u073b\u00bd")
        buf.write("\3\2\2\2\u073c\u073d\5\u00c4c\2\u073d\u00bf\3\2\2\2\u073e")
        buf.write("\u073f\5\u00c4c\2\u073f\u00c1\3\2\2\2\u0740\u0741\5\u00c4")
        buf.write("c\2\u0741\u00c3\3\2\2\2\u0742\u074e\7\u009d\2\2\u0743")
        buf.write("\u074e\5\u009cO\2\u0744\u074e\7\u00a0\2\2\u0745\u0746")
        buf.write("\7\4\2\2\u0746\u0747\5\u00c4c\2\u0747\u0748\7\5\2\2\u0748")
        buf.write("\u074e\3\2\2\2\u0749\u074a\7\b\2\2\u074a\u074b\5\u00c4")
        buf.write("c\2\u074b\u074c\7\t\2\2\u074c\u074e\3\2\2\2\u074d\u0742")
        buf.write("\3\2\2\2\u074d\u0743\3\2\2\2\u074d\u0744\3\2\2\2\u074d")
        buf.write("\u0745\3\2\2\2\u074d\u0749\3\2\2\2\u074e\u00c5\3\2\2\2")
        buf.write("\u0106\u00c8\u00ca\u00d5\u00dc\u00e1\u00e7\u00ed\u00ef")
        buf.write("\u010f\u0114\u0119\u0123\u0126\u0129\u012c\u013d\u0141")
        buf.write("\u0149\u014d\u014f\u0154\u0156\u015a\u0161\u0164\u0169")
        buf.write("\u016d\u0172\u017b\u017e\u0184\u0186\u018a\u0190\u0195")
        buf.write("\u01a0\u01a6\u01aa\u01b0\u01b5\u01be\u01c0\u01c6\u01ca")
        buf.write("\u01cd\u01d1\u01d7\u01dc\u01e3\u01ee\u01f1\u01f3\u01f9")
        buf.write("\u01ff\u0203\u020a\u0210\u0216\u021c\u0221\u022d\u0232")
        buf.write("\u023d\u0242\u0245\u024c\u024f\u0256\u025f\u0262\u0268")
        buf.write("\u026a\u026e\u0276\u027b\u0283\u0288\u0290\u0295\u029d")
        buf.write("\u02a2\u02a8\u02af\u02b2\u02ba\u02c4\u02c7\u02cd\u02cf")
        buf.write("\u02d2\u02e5\u02eb\u02f4\u02f9\u0302\u030d\u0314\u031a")
        buf.write("\u0320\u0329\u0330\u0334\u0336\u033a\u0341\u0343\u0347")
        buf.write("\u034a\u0351\u0358\u035b\u0365\u0368\u036e\u0370\u0374")
        buf.write("\u037b\u037e\u0386\u0390\u0393\u0399\u039b\u039f\u03a6")
        buf.write("\u03af\u03b3\u03b5\u03b9\u03c2\u03c7\u03c9\u03d2\u03dd")
        buf.write("\u03e4\u03e7\u03ea\u03f7\u0405\u040a\u040d\u041a\u0428")
        buf.write("\u042d\u0436\u0439\u043f\u0441\u0448\u044a\u0451\u0458")
        buf.write("\u045d\u0461\u0465\u0475\u047a\u047e\u0495\u049b\u049d")
        buf.write("\u04a1\u04a6\u04ae\u04b3\u04bc\u04c3\u04c7\u04d7\u04da")
        buf.write("\u04e2\u04eb\u04ef\u04f4\u0512\u051e\u0523\u052f\u0535")
        buf.write("\u053c\u0540\u054a\u054d\u0553\u0556\u0558\u055a\u0561")
        buf.write("\u056a\u056f\u057b\u057f\u0583\u0587\u058e\u0591\u0593")
        buf.write("\u059d\u05a4\u05a7\u05ab\u05b6\u05c0\u05ce\u05d6\u05d9")
        buf.write("\u05e1\u05e9\u05f1\u05fb\u060b\u0611\u0619\u061e\u0621")
        buf.write("\u0626\u062f\u0634\u0642\u0645\u0647\u064c\u0650\u0653")
        buf.write("\u065a\u0662\u0666\u066a\u066d\u0673\u0676\u0678\u0681")
        buf.write("\u0686\u068a\u068e\u0691\u069c\u06a1\u06a5\u06ac\u06b5")
        buf.write("\u06b9\u06bb\u06bf\u06c8\u06cd\u06cf\u06d8\u06e3\u06ea")
        buf.write("\u06ed\u06f4\u06fd\u0702\u0705\u0709\u0713\u071c\u074d")
        return buf.getvalue()


class SqlParser ( Parser ):

    grammarFileName = "Sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'::'", "'%('", "')s'", "';'", "'.'", 
                     "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
                     "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                     "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", 
                      "STAR", "PLUS", "MINUS", "TILDE", "PIPE2", "DIV", 
                      "MOD", "LT2", "GT2", "AMP", "PIPE", "LT", "LT_EQ", 
                      "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
                      "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", 
                      "K_ANALYZE", "K_AND", "K_AS", "K_ASC", "K_ATTACH", 
                      "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", 
                      "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                      "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ENABLE", "K_ESCAPE", "K_EXCEPT", 
                      "K_EXCLUSIVE", "K_EXISTS", "K_EXPLAIN", "K_FAIL", 
                      "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB", 
                      "K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", "K_IMMEDIATE", 
                      "K_IN", "K_INDEX", "K_INDEXED", "K_INITIALLY", "K_INNER", 
                      "K_INSERT", "K_INSTEAD", "K_INTERSECT", "K_INTO", 
                      "K_IS", "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", 
                      "K_LIMIT", "K_MATCH", "K_NATURAL", "K_NEXTVAL", "K_NO", 
                      "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", "K_OFFSET", 
                      "K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", 
                      "K_PRAGMA", "K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", 
                      "K_REFERENCES", "K_REGEXP", "K_REINDEX", "K_RELEASE", 
                      "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
                      "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", 
                      "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", "K_THEN", 
                      "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", "K_UNIQUE", 
                      "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", "K_VIEW", 
                      "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", 
                      "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_alter_table_add_constraint = 5
    RULE_alter_table_add = 6
    RULE_analyze_stmt = 7
    RULE_attach_stmt = 8
    RULE_begin_stmt = 9
    RULE_commit_stmt = 10
    RULE_compound_select_stmt = 11
    RULE_create_index_stmt = 12
    RULE_create_table_stmt = 13
    RULE_create_trigger_stmt = 14
    RULE_create_view_stmt = 15
    RULE_create_virtual_table_stmt = 16
    RULE_delete_stmt = 17
    RULE_delete_stmt_limited = 18
    RULE_detach_stmt = 19
    RULE_drop_index_stmt = 20
    RULE_drop_table_stmt = 21
    RULE_drop_trigger_stmt = 22
    RULE_drop_view_stmt = 23
    RULE_factored_select_stmt = 24
    RULE_insert_stmt = 25
    RULE_pragma_stmt = 26
    RULE_reindex_stmt = 27
    RULE_release_stmt = 28
    RULE_rollback_stmt = 29
    RULE_savepoint_stmt = 30
    RULE_simple_select_stmt = 31
    RULE_select_stmt = 32
    RULE_select_or_values = 33
    RULE_update_stmt = 34
    RULE_update_stmt_limited = 35
    RULE_vacuum_stmt = 36
    RULE_column_def = 37
    RULE_type_name = 38
    RULE_column_constraint = 39
    RULE_column_constraint_primary_key = 40
    RULE_column_constraint_foreign_key = 41
    RULE_column_constraint_not_null = 42
    RULE_column_constraint_null = 43
    RULE_column_default = 44
    RULE_column_default_value = 45
    RULE_conflict_clause = 46
    RULE_expr = 47
    RULE_foreign_key_clause = 48
    RULE_fk_target_column_name = 49
    RULE_raise_function = 50
    RULE_indexed_column = 51
    RULE_table_constraint = 52
    RULE_table_constraint_primary_key = 53
    RULE_table_constraint_foreign_key = 54
    RULE_table_constraint_unique = 55
    RULE_table_constraint_key = 56
    RULE_fk_origin_column_name = 57
    RULE_with_clause = 58
    RULE_qualified_table_name = 59
    RULE_ordering_term = 60
    RULE_pragma_value = 61
    RULE_common_table_expression = 62
    RULE_result_column = 63
    RULE_table_or_subquery = 64
    RULE_join_clause = 65
    RULE_join_operator = 66
    RULE_join_constraint = 67
    RULE_select_core = 68
    RULE_compound_operator = 69
    RULE_cte_table_name = 70
    RULE_signed_number = 71
    RULE_literal_value = 72
    RULE_unary_operator = 73
    RULE_error_message = 74
    RULE_module_argument = 75
    RULE_column_alias = 76
    RULE_keyword = 77
    RULE_unknown = 78
    RULE_name = 79
    RULE_function_name = 80
    RULE_database_name = 81
    RULE_source_table_name = 82
    RULE_table_name = 83
    RULE_table_or_index_name = 84
    RULE_new_table_name = 85
    RULE_column_name = 86
    RULE_collation_name = 87
    RULE_foreign_table = 88
    RULE_index_name = 89
    RULE_trigger_name = 90
    RULE_view_name = 91
    RULE_module_name = 92
    RULE_pragma_name = 93
    RULE_savepoint_name = 94
    RULE_table_alias = 95
    RULE_transaction_name = 96
    RULE_any_name = 97

    ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "alter_table_add_constraint", "alter_table_add", "analyze_stmt", 
                   "attach_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", 
                   "create_index_stmt", "create_table_stmt", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "delete_stmt", 
                   "delete_stmt_limited", "detach_stmt", "drop_index_stmt", 
                   "drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", 
                   "factored_select_stmt", "insert_stmt", "pragma_stmt", 
                   "reindex_stmt", "release_stmt", "rollback_stmt", "savepoint_stmt", 
                   "simple_select_stmt", "select_stmt", "select_or_values", 
                   "update_stmt", "update_stmt_limited", "vacuum_stmt", 
                   "column_def", "type_name", "column_constraint", "column_constraint_primary_key", 
                   "column_constraint_foreign_key", "column_constraint_not_null", 
                   "column_constraint_null", "column_default", "column_default_value", 
                   "conflict_clause", "expr", "foreign_key_clause", "fk_target_column_name", 
                   "raise_function", "indexed_column", "table_constraint", 
                   "table_constraint_primary_key", "table_constraint_foreign_key", 
                   "table_constraint_unique", "table_constraint_key", "fk_origin_column_name", 
                   "with_clause", "qualified_table_name", "ordering_term", 
                   "pragma_value", "common_table_expression", "result_column", 
                   "table_or_subquery", "join_clause", "join_operator", 
                   "join_constraint", "select_core", "compound_operator", 
                   "cte_table_name", "signed_number", "literal_value", "unary_operator", 
                   "error_message", "module_argument", "column_alias", "keyword", 
                   "unknown", "name", "function_name", "database_name", 
                   "source_table_name", "table_name", "table_or_index_name", 
                   "new_table_name", "column_name", "collation_name", "foreign_table", 
                   "index_name", "trigger_name", "view_name", "module_name", 
                   "pragma_name", "savepoint_name", "table_alias", "transaction_name", 
                   "any_name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    SCOL=4
    DOT=5
    OPEN_PAR=6
    CLOSE_PAR=7
    COMMA=8
    ASSIGN=9
    STAR=10
    PLUS=11
    MINUS=12
    TILDE=13
    PIPE2=14
    DIV=15
    MOD=16
    LT2=17
    GT2=18
    AMP=19
    PIPE=20
    LT=21
    LT_EQ=22
    GT=23
    GT_EQ=24
    EQ=25
    NOT_EQ1=26
    NOT_EQ2=27
    K_ABORT=28
    K_ACTION=29
    K_ADD=30
    K_AFTER=31
    K_ALL=32
    K_ALTER=33
    K_ANALYZE=34
    K_AND=35
    K_AS=36
    K_ASC=37
    K_ATTACH=38
    K_AUTOINCREMENT=39
    K_BEFORE=40
    K_BEGIN=41
    K_BETWEEN=42
    K_BY=43
    K_CASCADE=44
    K_CASE=45
    K_CAST=46
    K_CHECK=47
    K_COLLATE=48
    K_COLUMN=49
    K_COMMIT=50
    K_CONFLICT=51
    K_CONSTRAINT=52
    K_CREATE=53
    K_CROSS=54
    K_CURRENT_DATE=55
    K_CURRENT_TIME=56
    K_CURRENT_TIMESTAMP=57
    K_DATABASE=58
    K_DEFAULT=59
    K_DEFERRABLE=60
    K_DEFERRED=61
    K_DELETE=62
    K_DESC=63
    K_DETACH=64
    K_DISTINCT=65
    K_DROP=66
    K_EACH=67
    K_ELSE=68
    K_END=69
    K_ENABLE=70
    K_ESCAPE=71
    K_EXCEPT=72
    K_EXCLUSIVE=73
    K_EXISTS=74
    K_EXPLAIN=75
    K_FAIL=76
    K_FOR=77
    K_FOREIGN=78
    K_FROM=79
    K_FULL=80
    K_GLOB=81
    K_GROUP=82
    K_HAVING=83
    K_IF=84
    K_IGNORE=85
    K_IMMEDIATE=86
    K_IN=87
    K_INDEX=88
    K_INDEXED=89
    K_INITIALLY=90
    K_INNER=91
    K_INSERT=92
    K_INSTEAD=93
    K_INTERSECT=94
    K_INTO=95
    K_IS=96
    K_ISNULL=97
    K_JOIN=98
    K_KEY=99
    K_LEFT=100
    K_LIKE=101
    K_LIMIT=102
    K_MATCH=103
    K_NATURAL=104
    K_NEXTVAL=105
    K_NO=106
    K_NOT=107
    K_NOTNULL=108
    K_NULL=109
    K_OF=110
    K_OFFSET=111
    K_ON=112
    K_ONLY=113
    K_OR=114
    K_ORDER=115
    K_OUTER=116
    K_PLAN=117
    K_PRAGMA=118
    K_PRIMARY=119
    K_QUERY=120
    K_RAISE=121
    K_RECURSIVE=122
    K_REFERENCES=123
    K_REGEXP=124
    K_REINDEX=125
    K_RELEASE=126
    K_RENAME=127
    K_REPLACE=128
    K_RESTRICT=129
    K_RIGHT=130
    K_ROLLBACK=131
    K_ROW=132
    K_SAVEPOINT=133
    K_SELECT=134
    K_SET=135
    K_TABLE=136
    K_TEMP=137
    K_TEMPORARY=138
    K_THEN=139
    K_TO=140
    K_TRANSACTION=141
    K_TRIGGER=142
    K_UNION=143
    K_UNIQUE=144
    K_UPDATE=145
    K_USING=146
    K_VACUUM=147
    K_VALUES=148
    K_VIEW=149
    K_VIRTUAL=150
    K_WHEN=151
    K_WHERE=152
    K_WITH=153
    K_WITHOUT=154
    IDENTIFIER=155
    NUMERIC_LITERAL=156
    BIND_PARAMETER=157
    STRING_LITERAL=158
    BLOB_LITERAL=159
    SINGLE_LINE_COMMENT=160
    MULTILINE_COMMENT=161
    SPACES=162
    UNEXPECTED_CHAR=163

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SqlParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SqlParser.Sql_stmt_listContext,i)


        def error(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SqlParser.ErrorContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SqlParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.SCOL) | (1 << SqlParser.K_ALTER) | (1 << SqlParser.K_ANALYZE) | (1 << SqlParser.K_ATTACH) | (1 << SqlParser.K_BEGIN) | (1 << SqlParser.K_COMMIT) | (1 << SqlParser.K_CREATE) | (1 << SqlParser.K_DELETE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlParser.K_DETACH - 64)) | (1 << (SqlParser.K_DROP - 64)) | (1 << (SqlParser.K_END - 64)) | (1 << (SqlParser.K_EXPLAIN - 64)) | (1 << (SqlParser.K_INSERT - 64)) | (1 << (SqlParser.K_PRAGMA - 64)) | (1 << (SqlParser.K_REINDEX - 64)) | (1 << (SqlParser.K_RELEASE - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlParser.K_REPLACE - 128)) | (1 << (SqlParser.K_ROLLBACK - 128)) | (1 << (SqlParser.K_SAVEPOINT - 128)) | (1 << (SqlParser.K_SELECT - 128)) | (1 << (SqlParser.K_UPDATE - 128)) | (1 << (SqlParser.K_VACUUM - 128)) | (1 << (SqlParser.K_VALUES - 128)) | (1 << (SqlParser.K_WITH - 128)) | (1 << (SqlParser.UNEXPECTED_CHAR - 128)))) != 0):
                self.state = 198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlParser.SCOL, SqlParser.K_ALTER, SqlParser.K_ANALYZE, SqlParser.K_ATTACH, SqlParser.K_BEGIN, SqlParser.K_COMMIT, SqlParser.K_CREATE, SqlParser.K_DELETE, SqlParser.K_DETACH, SqlParser.K_DROP, SqlParser.K_END, SqlParser.K_EXPLAIN, SqlParser.K_INSERT, SqlParser.K_PRAGMA, SqlParser.K_REINDEX, SqlParser.K_RELEASE, SqlParser.K_REPLACE, SqlParser.K_ROLLBACK, SqlParser.K_SAVEPOINT, SqlParser.K_SELECT, SqlParser.K_UPDATE, SqlParser.K_VACUUM, SqlParser.K_VALUES, SqlParser.K_WITH]:
                    self.state = 196
                    self.sql_stmt_list()
                    pass
                elif token in [SqlParser.UNEXPECTED_CHAR]:
                    self.state = 197
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 203
            self.match(SqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(SqlParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_error

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError" ):
                listener.enterError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError" ):
                listener.exitError(self)




    def error(self):

        localctx = SqlParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            localctx._UNEXPECTED_CHAR = self.match(SqlParser.UNEXPECTED_CHAR)               
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SqlParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.SCOL:
                self.state = 208
                self.match(SqlParser.SCOL)
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self.sql_stmt()
            self.state = 223
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 216 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 215
                        self.match(SqlParser.SCOL)
                        self.state = 218 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SqlParser.SCOL):
                            break

                    self.state = 220
                    self.sql_stmt() 
                self.state = 225
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 226
                    self.match(SqlParser.SCOL) 
                self.state = 231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SqlParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SqlParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SqlParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SqlParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SqlParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SqlParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SqlParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SqlParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SqlParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SqlParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SqlParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SqlParser.Detach_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(SqlParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(SqlParser.Drop_table_stmtContext,0)


        def drop_trigger_stmt(self):
            return self.getTypedRuleContext(SqlParser.Drop_trigger_stmtContext,0)


        def drop_view_stmt(self):
            return self.getTypedRuleContext(SqlParser.Drop_view_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SqlParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SqlParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SqlParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SqlParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SqlParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SqlParser.Savepoint_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SqlParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SqlParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SqlParser.Vacuum_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SqlParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SqlParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SqlParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SqlParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_EXPLAIN:
                self.state = 232
                self.match(SqlParser.K_EXPLAIN)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_QUERY:
                    self.state = 233
                    self.match(SqlParser.K_QUERY)
                    self.state = 234
                    self.match(SqlParser.K_PLAN)




            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 239
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 240
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 241
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 242
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 243
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 244
                self.compound_select_stmt()
                pass

            elif la_ == 7:
                self.state = 245
                self.create_index_stmt()
                pass

            elif la_ == 8:
                self.state = 246
                self.create_table_stmt()
                pass

            elif la_ == 9:
                self.state = 247
                self.create_trigger_stmt()
                pass

            elif la_ == 10:
                self.state = 248
                self.create_view_stmt()
                pass

            elif la_ == 11:
                self.state = 249
                self.create_virtual_table_stmt()
                pass

            elif la_ == 12:
                self.state = 250
                self.delete_stmt()
                pass

            elif la_ == 13:
                self.state = 251
                self.delete_stmt_limited()
                pass

            elif la_ == 14:
                self.state = 252
                self.detach_stmt()
                pass

            elif la_ == 15:
                self.state = 253
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 254
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 255
                self.drop_trigger_stmt()
                pass

            elif la_ == 18:
                self.state = 256
                self.drop_view_stmt()
                pass

            elif la_ == 19:
                self.state = 257
                self.factored_select_stmt()
                pass

            elif la_ == 20:
                self.state = 258
                self.insert_stmt()
                pass

            elif la_ == 21:
                self.state = 259
                self.pragma_stmt()
                pass

            elif la_ == 22:
                self.state = 260
                self.reindex_stmt()
                pass

            elif la_ == 23:
                self.state = 261
                self.release_stmt()
                pass

            elif la_ == 24:
                self.state = 262
                self.rollback_stmt()
                pass

            elif la_ == 25:
                self.state = 263
                self.savepoint_stmt()
                pass

            elif la_ == 26:
                self.state = 264
                self.simple_select_stmt()
                pass

            elif la_ == 27:
                self.state = 265
                self.select_stmt()
                pass

            elif la_ == 28:
                self.state = 266
                self.update_stmt()
                pass

            elif la_ == 29:
                self.state = 267
                self.update_stmt_limited()
                pass

            elif la_ == 30:
                self.state = 268
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(SqlParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(SqlParser.K_TABLE, 0)

        def source_table_name(self):
            return self.getTypedRuleContext(SqlParser.Source_table_nameContext,0)


        def K_RENAME(self):
            return self.getToken(SqlParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(SqlParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SqlParser.New_table_nameContext,0)


        def alter_table_add(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_addContext,0)


        def alter_table_add_constraint(self):
            return self.getTypedRuleContext(SqlParser.Alter_table_add_constraintContext,0)


        def K_ADD(self):
            return self.getToken(SqlParser.K_ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SqlParser.Column_defContext,0)


        def K_ONLY(self):
            return self.getToken(SqlParser.K_ONLY, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_ENABLE(self):
            return self.getToken(SqlParser.K_ENABLE, 0)

        def unknown(self):
            return self.getTypedRuleContext(SqlParser.UnknownContext,0)


        def K_COLUMN(self):
            return self.getToken(SqlParser.K_COLUMN, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SqlParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(SqlParser.K_ALTER)
            self.state = 272
            self.match(SqlParser.K_TABLE)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_ONLY:
                self.state = 273
                self.match(SqlParser.K_ONLY)


            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 276
                self.database_name()
                self.state = 277
                self.match(SqlParser.DOT)


            self.state = 281
            self.source_table_name()
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 282
                self.match(SqlParser.K_RENAME)
                self.state = 283
                self.match(SqlParser.K_TO)
                self.state = 284
                self.new_table_name()
                pass

            elif la_ == 2:
                self.state = 285
                self.alter_table_add()
                pass

            elif la_ == 3:
                self.state = 286
                self.alter_table_add_constraint()
                pass

            elif la_ == 4:
                self.state = 287
                self.match(SqlParser.K_ADD)
                self.state = 289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 288
                    self.match(SqlParser.K_COLUMN)


                self.state = 291
                self.column_def()
                pass


            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 294
                self.match(SqlParser.K_ENABLE)


            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 297
                self.unknown()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_add_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADD(self):
            return self.getToken(SqlParser.K_ADD, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SqlParser.K_CONSTRAINT, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(SqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_table_add_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add_constraint" ):
                listener.enterAlter_table_add_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add_constraint" ):
                listener.exitAlter_table_add_constraint(self)




    def alter_table_add_constraint(self):

        localctx = SqlParser.Alter_table_add_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alter_table_add_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(SqlParser.K_ADD)
            self.state = 301
            self.match(SqlParser.K_CONSTRAINT)
            self.state = 302
            self.any_name()
            self.state = 303
            self.table_constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_addContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADD(self):
            return self.getToken(SqlParser.K_ADD, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(SqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_alter_table_add

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_add" ):
                listener.enterAlter_table_add(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_add" ):
                listener.exitAlter_table_add(self)




    def alter_table_add(self):

        localctx = SqlParser.Alter_table_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alter_table_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(SqlParser.K_ADD)
            self.state = 306
            self.table_constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Analyze_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ANALYZE(self):
            return self.getToken(SqlParser.K_ANALYZE, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SqlParser.Table_or_index_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SqlParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(SqlParser.K_ANALYZE)
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 309
                self.database_name()

            elif la_ == 2:
                self.state = 310
                self.table_or_index_name()

            elif la_ == 3:
                self.state = 311
                self.database_name()
                self.state = 312
                self.match(SqlParser.DOT)
                self.state = 313
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ATTACH(self):
            return self.getToken(SqlParser.K_ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SqlParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SqlParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(SqlParser.K_ATTACH)
            self.state = 319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 318
                self.match(SqlParser.K_DATABASE)


            self.state = 321
            self.expr(0)
            self.state = 322
            self.match(SqlParser.K_AS)
            self.state = 323
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(SqlParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(SqlParser.K_TRANSACTION, 0)

        def K_DEFERRED(self):
            return self.getToken(SqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SqlParser.K_IMMEDIATE, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SqlParser.K_EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SqlParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SqlParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(SqlParser.K_BEGIN)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (SqlParser.K_DEFERRED - 61)) | (1 << (SqlParser.K_EXCLUSIVE - 61)) | (1 << (SqlParser.K_IMMEDIATE - 61)))) != 0):
                self.state = 326
                _la = self._input.LA(1)
                if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (SqlParser.K_DEFERRED - 61)) | (1 << (SqlParser.K_EXCLUSIVE - 61)) | (1 << (SqlParser.K_IMMEDIATE - 61)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TRANSACTION:
                self.state = 329
                self.match(SqlParser.K_TRANSACTION)
                self.state = 331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 330
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(SqlParser.K_COMMIT, 0)

        def K_END(self):
            return self.getToken(SqlParser.K_END, 0)

        def K_TRANSACTION(self):
            return self.getToken(SqlParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SqlParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SqlParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            _la = self._input.LA(1)
            if not(_la==SqlParser.K_COMMIT or _la==SqlParser.K_END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TRANSACTION:
                self.state = 336
                self.match(SqlParser.K_TRANSACTION)
                self.state = 338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 337
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_coreContext,i)


        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.Common_table_expressionContext,i)


        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_UNION(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_UNION)
            else:
                return self.getToken(SqlParser.K_UNION, i)

        def K_INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_INTERSECT)
            else:
                return self.getToken(SqlParser.K_INTERSECT, i)

        def K_EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_EXCEPT)
            else:
                return self.getToken(SqlParser.K_EXCEPT, i)

        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def K_ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_ALL)
            else:
                return self.getToken(SqlParser.K_ALL, i)

        def getRuleIndex(self):
            return SqlParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SqlParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 342
                self.match(SqlParser.K_WITH)
                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self.match(SqlParser.K_RECURSIVE)


                self.state = 346
                self.common_table_expression()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 347
                    self.match(SqlParser.COMMA)
                    self.state = 348
                    self.common_table_expression()
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 356
            self.select_core()
            self.state = 366 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 363
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlParser.K_UNION]:
                    self.state = 357
                    self.match(SqlParser.K_UNION)
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlParser.K_ALL:
                        self.state = 358
                        self.match(SqlParser.K_ALL)


                    pass
                elif token in [SqlParser.K_INTERSECT]:
                    self.state = 361
                    self.match(SqlParser.K_INTERSECT)
                    pass
                elif token in [SqlParser.K_EXCEPT]:
                    self.state = 362
                    self.match(SqlParser.K_EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 365
                self.select_core()
                self.state = 368 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SqlParser.K_EXCEPT or _la==SqlParser.K_INTERSECT or _la==SqlParser.K_UNION):
                    break

            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_ORDER:
                self.state = 370
                self.match(SqlParser.K_ORDER)
                self.state = 371
                self.match(SqlParser.K_BY)
                self.state = 372
                self.ordering_term()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 373
                    self.match(SqlParser.COMMA)
                    self.state = 374
                    self.ordering_term()
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_LIMIT:
                self.state = 382
                self.match(SqlParser.K_LIMIT)
                self.state = 383
                self.expr(0)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.COMMA or _la==SqlParser.K_OFFSET:
                    self.state = 384
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 385
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(SqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(SqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Indexed_columnContext,i)


        def K_UNIQUE(self):
            return self.getToken(SqlParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(SqlParser.K_CREATE)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_UNIQUE:
                self.state = 391
                self.match(SqlParser.K_UNIQUE)


            self.state = 394
            self.match(SqlParser.K_INDEX)
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 395
                self.match(SqlParser.K_IF)
                self.state = 396
                self.match(SqlParser.K_NOT)
                self.state = 397
                self.match(SqlParser.K_EXISTS)


            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 400
                self.database_name()
                self.state = 401
                self.match(SqlParser.DOT)


            self.state = 405
            self.index_name()
            self.state = 406
            self.match(SqlParser.K_ON)
            self.state = 407
            self.table_name()
            self.state = 408
            self.match(SqlParser.OPEN_PAR)
            self.state = 409
            self.indexed_column()
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 410
                self.match(SqlParser.COMMA)
                self.state = 411
                self.indexed_column()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(SqlParser.CLOSE_PAR)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHERE:
                self.state = 418
                self.match(SqlParser.K_WHERE)
                self.state = 419
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(SqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_defContext,i)


        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def unknown(self):
            return self.getTypedRuleContext(SqlParser.UnknownContext,0)


        def K_TEMP(self):
            return self.getToken(SqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SqlParser.K_TEMPORARY, 0)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SqlParser.Table_constraintContext,i)


        def K_WITHOUT(self):
            return self.getToken(SqlParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(SqlParser.K_CREATE)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY:
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 426
            self.match(SqlParser.K_TABLE)
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 427
                self.match(SqlParser.K_IF)
                self.state = 428
                self.match(SqlParser.K_NOT)
                self.state = 429
                self.match(SqlParser.K_EXISTS)


            self.state = 435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 432
                self.database_name()
                self.state = 433
                self.match(SqlParser.DOT)


            self.state = 437
            self.table_name()
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.OPEN_PAR]:
                self.state = 438
                self.match(SqlParser.OPEN_PAR)
                self.state = 439
                self.column_def()
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 444
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                    if la_ == 1:
                        self.state = 440
                        self.match(SqlParser.COMMA)
                        self.state = 441
                        self.table_constraint()
                        pass

                    elif la_ == 2:
                        self.state = 442
                        self.match(SqlParser.COMMA)
                        self.state = 443
                        self.column_def()
                        pass


                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 449
                self.match(SqlParser.CLOSE_PAR)
                self.state = 452
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.match(SqlParser.K_WITHOUT)
                    self.state = 451
                    self.match(SqlParser.IDENTIFIER)


                pass
            elif token in [SqlParser.K_AS]:
                self.state = 454
                self.match(SqlParser.K_AS)
                self.state = 455
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 458
                self.unknown()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_TRIGGER(self):
            return self.getToken(SqlParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SqlParser.Trigger_nameContext,0)


        def K_ON(self):
            return self.getToken(SqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def K_BEGIN(self):
            return self.getToken(SqlParser.K_BEGIN, 0)

        def K_END(self):
            return self.getToken(SqlParser.K_END, 0)

        def K_DELETE(self):
            return self.getToken(SqlParser.K_DELETE, 0)

        def K_INSERT(self):
            return self.getToken(SqlParser.K_INSERT, 0)

        def K_UPDATE(self):
            return self.getToken(SqlParser.K_UPDATE, 0)

        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Database_nameContext,i)


        def K_BEFORE(self):
            return self.getToken(SqlParser.K_BEFORE, 0)

        def K_AFTER(self):
            return self.getToken(SqlParser.K_AFTER, 0)

        def K_INSTEAD(self):
            return self.getToken(SqlParser.K_INSTEAD, 0)

        def K_OF(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_OF)
            else:
                return self.getToken(SqlParser.K_OF, i)

        def K_FOR(self):
            return self.getToken(SqlParser.K_FOR, 0)

        def K_EACH(self):
            return self.getToken(SqlParser.K_EACH, 0)

        def K_ROW(self):
            return self.getToken(SqlParser.K_ROW, 0)

        def K_WHEN(self):
            return self.getToken(SqlParser.K_WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def K_TEMP(self):
            return self.getToken(SqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SqlParser.K_TEMPORARY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_stmtContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SqlParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(SqlParser.K_CREATE)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY:
                self.state = 462
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 465
            self.match(SqlParser.K_TRIGGER)
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 466
                self.match(SqlParser.K_IF)
                self.state = 467
                self.match(SqlParser.K_NOT)
                self.state = 468
                self.match(SqlParser.K_EXISTS)


            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 471
                self.database_name()
                self.state = 472
                self.match(SqlParser.DOT)


            self.state = 476
            self.trigger_name()
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_BEFORE]:
                self.state = 477
                self.match(SqlParser.K_BEFORE)
                pass
            elif token in [SqlParser.K_AFTER]:
                self.state = 478
                self.match(SqlParser.K_AFTER)
                pass
            elif token in [SqlParser.K_INSTEAD]:
                self.state = 479
                self.match(SqlParser.K_INSTEAD)
                self.state = 480
                self.match(SqlParser.K_OF)
                pass
            elif token in [SqlParser.K_DELETE, SqlParser.K_INSERT, SqlParser.K_UPDATE]:
                pass
            else:
                pass
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_DELETE]:
                self.state = 483
                self.match(SqlParser.K_DELETE)
                pass
            elif token in [SqlParser.K_INSERT]:
                self.state = 484
                self.match(SqlParser.K_INSERT)
                pass
            elif token in [SqlParser.K_UPDATE]:
                self.state = 485
                self.match(SqlParser.K_UPDATE)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_OF:
                    self.state = 486
                    self.match(SqlParser.K_OF)
                    self.state = 487
                    self.column_name()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 488
                        self.match(SqlParser.COMMA)
                        self.state = 489
                        self.column_name()
                        self.state = 494
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 499
            self.match(SqlParser.K_ON)
            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 500
                self.database_name()
                self.state = 501
                self.match(SqlParser.DOT)


            self.state = 505
            self.table_name()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_FOR:
                self.state = 506
                self.match(SqlParser.K_FOR)
                self.state = 507
                self.match(SqlParser.K_EACH)
                self.state = 508
                self.match(SqlParser.K_ROW)


            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHEN:
                self.state = 511
                self.match(SqlParser.K_WHEN)
                self.state = 512
                self.expr(0)


            self.state = 515
            self.match(SqlParser.K_BEGIN)
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 517
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 518
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 519
                    self.select_stmt()
                    pass


                self.state = 522
                self.match(SqlParser.SCOL)
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SqlParser.K_DELETE or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (SqlParser.K_INSERT - 92)) | (1 << (SqlParser.K_REPLACE - 92)) | (1 << (SqlParser.K_SELECT - 92)) | (1 << (SqlParser.K_UPDATE - 92)) | (1 << (SqlParser.K_VALUES - 92)) | (1 << (SqlParser.K_WITH - 92)))) != 0)):
                    break

            self.state = 528
            self.match(SqlParser.K_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_VIEW(self):
            return self.getToken(SqlParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SqlParser.View_nameContext,0)


        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_TEMP(self):
            return self.getToken(SqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SqlParser.K_TEMPORARY, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SqlParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(SqlParser.K_CREATE)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY:
                self.state = 531
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_TEMP or _la==SqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 534
            self.match(SqlParser.K_VIEW)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 535
                self.match(SqlParser.K_IF)
                self.state = 536
                self.match(SqlParser.K_NOT)
                self.state = 537
                self.match(SqlParser.K_EXISTS)


            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 540
                self.database_name()
                self.state = 541
                self.match(SqlParser.DOT)


            self.state = 545
            self.view_name()
            self.state = 546
            self.match(SqlParser.K_AS)
            self.state = 547
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_virtual_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_VIRTUAL(self):
            return self.getToken(SqlParser.K_VIRTUAL, 0)

        def K_TABLE(self):
            return self.getToken(SqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def K_USING(self):
            return self.getToken(SqlParser.K_USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SqlParser.Module_nameContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SqlParser.Module_argumentContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SqlParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(SqlParser.K_CREATE)
            self.state = 550
            self.match(SqlParser.K_VIRTUAL)
            self.state = 551
            self.match(SqlParser.K_TABLE)
            self.state = 555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 552
                self.match(SqlParser.K_IF)
                self.state = 553
                self.match(SqlParser.K_NOT)
                self.state = 554
                self.match(SqlParser.K_EXISTS)


            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 557
                self.database_name()
                self.state = 558
                self.match(SqlParser.DOT)


            self.state = 562
            self.table_name()
            self.state = 563
            self.match(SqlParser.K_USING)
            self.state = 564
            self.module_name()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.OPEN_PAR:
                self.state = 565
                self.match(SqlParser.OPEN_PAR)
                self.state = 566
                self.module_argument()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 567
                    self.match(SqlParser.COMMA)
                    self.state = 568
                    self.module_argument()
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 574
                self.match(SqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SqlParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SqlParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 578
                self.with_clause()


            self.state = 581
            self.match(SqlParser.K_DELETE)
            self.state = 582
            self.match(SqlParser.K_FROM)
            self.state = 583
            self.qualified_table_name()
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHERE:
                self.state = 584
                self.match(SqlParser.K_WHERE)
                self.state = 585
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(SqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(SqlParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SqlParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 588
                self.with_clause()


            self.state = 591
            self.match(SqlParser.K_DELETE)
            self.state = 592
            self.match(SqlParser.K_FROM)
            self.state = 593
            self.qualified_table_name()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHERE:
                self.state = 594
                self.match(SqlParser.K_WHERE)
                self.state = 595
                self.expr(0)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_LIMIT or _la==SqlParser.K_ORDER:
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_ORDER:
                    self.state = 598
                    self.match(SqlParser.K_ORDER)
                    self.state = 599
                    self.match(SqlParser.K_BY)
                    self.state = 600
                    self.ordering_term()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 601
                        self.match(SqlParser.COMMA)
                        self.state = 602
                        self.ordering_term()
                        self.state = 607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 610
                self.match(SqlParser.K_LIMIT)
                self.state = 611
                self.expr(0)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.COMMA or _la==SqlParser.K_OFFSET:
                    self.state = 612
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 613
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Detach_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DETACH(self):
            return self.getToken(SqlParser.K_DETACH, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_DATABASE(self):
            return self.getToken(SqlParser.K_DATABASE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SqlParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(SqlParser.K_DETACH)
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 619
                self.match(SqlParser.K_DATABASE)


            self.state = 622
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SqlParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(SqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_drop_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_stmt" ):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_stmt" ):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = SqlParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(SqlParser.K_DROP)
            self.state = 625
            self.match(SqlParser.K_INDEX)
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 626
                self.match(SqlParser.K_IF)
                self.state = 627
                self.match(SqlParser.K_EXISTS)


            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 630
                self.database_name()
                self.state = 631
                self.match(SqlParser.DOT)


            self.state = 635
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SqlParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(SqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_drop_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stmt" ):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stmt" ):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = SqlParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(SqlParser.K_DROP)
            self.state = 638
            self.match(SqlParser.K_TABLE)
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 639
                self.match(SqlParser.K_IF)
                self.state = 640
                self.match(SqlParser.K_EXISTS)


            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 643
                self.database_name()
                self.state = 644
                self.match(SqlParser.DOT)


            self.state = 648
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_trigger_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SqlParser.K_DROP, 0)

        def K_TRIGGER(self):
            return self.getToken(SqlParser.K_TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SqlParser.Trigger_nameContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_drop_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger_stmt" ):
                listener.enterDrop_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger_stmt" ):
                listener.exitDrop_trigger_stmt(self)




    def drop_trigger_stmt(self):

        localctx = SqlParser.Drop_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_drop_trigger_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(SqlParser.K_DROP)
            self.state = 651
            self.match(SqlParser.K_TRIGGER)
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 652
                self.match(SqlParser.K_IF)
                self.state = 653
                self.match(SqlParser.K_EXISTS)


            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 656
                self.database_name()
                self.state = 657
                self.match(SqlParser.DOT)


            self.state = 661
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_view_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(SqlParser.K_DROP, 0)

        def K_VIEW(self):
            return self.getToken(SqlParser.K_VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SqlParser.View_nameContext,0)


        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_drop_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view_stmt" ):
                listener.enterDrop_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view_stmt" ):
                listener.exitDrop_view_stmt(self)




    def drop_view_stmt(self):

        localctx = SqlParser.Drop_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_drop_view_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(SqlParser.K_DROP)
            self.state = 664
            self.match(SqlParser.K_VIEW)
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 665
                self.match(SqlParser.K_IF)
                self.state = 666
                self.match(SqlParser.K_EXISTS)


            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 669
                self.database_name()
                self.state = 670
                self.match(SqlParser.DOT)


            self.state = 674
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_coreContext,i)


        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.Common_table_expressionContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SqlParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 676
                self.match(SqlParser.K_WITH)
                self.state = 678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 677
                    self.match(SqlParser.K_RECURSIVE)


                self.state = 680
                self.common_table_expression()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 681
                    self.match(SqlParser.COMMA)
                    self.state = 682
                    self.common_table_expression()
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 690
            self.select_core()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.K_EXCEPT or _la==SqlParser.K_INTERSECT or _la==SqlParser.K_UNION:
                self.state = 691
                self.compound_operator()
                self.state = 692
                self.select_core()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_ORDER:
                self.state = 699
                self.match(SqlParser.K_ORDER)
                self.state = 700
                self.match(SqlParser.K_BY)
                self.state = 701
                self.ordering_term()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 702
                    self.match(SqlParser.COMMA)
                    self.state = 703
                    self.ordering_term()
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_LIMIT:
                self.state = 711
                self.match(SqlParser.K_LIMIT)
                self.state = 712
                self.expr(0)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.COMMA or _la==SqlParser.K_OFFSET:
                    self.state = 713
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 714
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(SqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(SqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(SqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(SqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(SqlParser.K_VALUES, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(SqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 719
                self.with_clause()


            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 722
                self.match(SqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 723
                self.match(SqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 724
                self.match(SqlParser.K_INSERT)
                self.state = 725
                self.match(SqlParser.K_OR)
                self.state = 726
                self.match(SqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 727
                self.match(SqlParser.K_INSERT)
                self.state = 728
                self.match(SqlParser.K_OR)
                self.state = 729
                self.match(SqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 730
                self.match(SqlParser.K_INSERT)
                self.state = 731
                self.match(SqlParser.K_OR)
                self.state = 732
                self.match(SqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 733
                self.match(SqlParser.K_INSERT)
                self.state = 734
                self.match(SqlParser.K_OR)
                self.state = 735
                self.match(SqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 736
                self.match(SqlParser.K_INSERT)
                self.state = 737
                self.match(SqlParser.K_OR)
                self.state = 738
                self.match(SqlParser.K_IGNORE)
                pass


            self.state = 741
            self.match(SqlParser.K_INTO)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 742
                self.database_name()
                self.state = 743
                self.match(SqlParser.DOT)


            self.state = 747
            self.table_name()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.OPEN_PAR:
                self.state = 748
                self.match(SqlParser.OPEN_PAR)
                self.state = 749
                self.column_name()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 750
                    self.match(SqlParser.COMMA)
                    self.state = 751
                    self.column_name()
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self.match(SqlParser.CLOSE_PAR)


            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 761
                self.match(SqlParser.K_VALUES)
                self.state = 762
                self.match(SqlParser.OPEN_PAR)
                self.state = 763
                self.expr(0)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 764
                    self.match(SqlParser.COMMA)
                    self.state = 765
                    self.expr(0)
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 771
                self.match(SqlParser.CLOSE_PAR)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 772
                    self.match(SqlParser.COMMA)
                    self.state = 773
                    self.match(SqlParser.OPEN_PAR)
                    self.state = 774
                    self.expr(0)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 775
                        self.match(SqlParser.COMMA)
                        self.state = 776
                        self.expr(0)
                        self.state = 781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 782
                    self.match(SqlParser.CLOSE_PAR)
                    self.state = 788
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 789
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 790
                self.match(SqlParser.K_DEFAULT)
                self.state = 791
                self.match(SqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRAGMA(self):
            return self.getToken(SqlParser.K_PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SqlParser.Pragma_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def pragma_value(self):
            return self.getTypedRuleContext(SqlParser.Pragma_valueContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SqlParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(SqlParser.K_PRAGMA)
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 795
                self.database_name()
                self.state = 796
                self.match(SqlParser.DOT)


            self.state = 800
            self.pragma_name()
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.ASSIGN]:
                self.state = 801
                self.match(SqlParser.ASSIGN)
                self.state = 802
                self.pragma_value()
                pass
            elif token in [SqlParser.OPEN_PAR]:
                self.state = 803
                self.match(SqlParser.OPEN_PAR)
                self.state = 804
                self.pragma_value()
                self.state = 805
                self.match(SqlParser.CLOSE_PAR)
                pass
            elif token in [SqlParser.EOF, SqlParser.SCOL, SqlParser.K_ALTER, SqlParser.K_ANALYZE, SqlParser.K_ATTACH, SqlParser.K_BEGIN, SqlParser.K_COMMIT, SqlParser.K_CREATE, SqlParser.K_DELETE, SqlParser.K_DETACH, SqlParser.K_DROP, SqlParser.K_END, SqlParser.K_EXPLAIN, SqlParser.K_INSERT, SqlParser.K_PRAGMA, SqlParser.K_REINDEX, SqlParser.K_RELEASE, SqlParser.K_REPLACE, SqlParser.K_ROLLBACK, SqlParser.K_SAVEPOINT, SqlParser.K_SELECT, SqlParser.K_UPDATE, SqlParser.K_VACUUM, SqlParser.K_VALUES, SqlParser.K_WITH, SqlParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(SqlParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SqlParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SqlParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(SqlParser.K_REINDEX)
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 810
                self.collation_name()

            elif la_ == 2:
                self.state = 814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 811
                    self.database_name()
                    self.state = 812
                    self.match(SqlParser.DOT)


                self.state = 818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 816
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 817
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Release_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RELEASE(self):
            return self.getToken(SqlParser.K_RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SqlParser.Savepoint_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SqlParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SqlParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(SqlParser.K_RELEASE)
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 823
                self.match(SqlParser.K_SAVEPOINT)


            self.state = 826
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_TRANSACTION(self):
            return self.getToken(SqlParser.K_TRANSACTION, 0)

        def K_TO(self):
            return self.getToken(SqlParser.K_TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SqlParser.Savepoint_nameContext,0)


        def transaction_name(self):
            return self.getTypedRuleContext(SqlParser.Transaction_nameContext,0)


        def K_SAVEPOINT(self):
            return self.getToken(SqlParser.K_SAVEPOINT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SqlParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(SqlParser.K_ROLLBACK)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TRANSACTION:
                self.state = 829
                self.match(SqlParser.K_TRANSACTION)
                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self.transaction_name()




            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_TO:
                self.state = 835
                self.match(SqlParser.K_TO)
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 836
                    self.match(SqlParser.K_SAVEPOINT)


                self.state = 839
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SAVEPOINT(self):
            return self.getToken(SqlParser.K_SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SqlParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SqlParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(SqlParser.K_SAVEPOINT)
            self.state = 843
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SqlParser.Select_coreContext,0)


        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.Common_table_expressionContext,i)


        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SqlParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 845
                self.match(SqlParser.K_WITH)
                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.match(SqlParser.K_RECURSIVE)


                self.state = 849
                self.common_table_expression()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 850
                    self.match(SqlParser.COMMA)
                    self.state = 851
                    self.common_table_expression()
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 859
            self.select_core()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_ORDER:
                self.state = 860
                self.match(SqlParser.K_ORDER)
                self.state = 861
                self.match(SqlParser.K_BY)
                self.state = 862
                self.ordering_term()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 863
                    self.match(SqlParser.COMMA)
                    self.state = 864
                    self.ordering_term()
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_LIMIT:
                self.state = 872
                self.match(SqlParser.K_LIMIT)
                self.state = 873
                self.expr(0)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.COMMA or _la==SqlParser.K_OFFSET:
                    self.state = 874
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 875
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_or_valuesContext,i)


        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SqlParser.Common_table_expressionContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 880
                self.match(SqlParser.K_WITH)
                self.state = 882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 881
                    self.match(SqlParser.K_RECURSIVE)


                self.state = 884
                self.common_table_expression()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 885
                    self.match(SqlParser.COMMA)
                    self.state = 886
                    self.common_table_expression()
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 894
            self.select_or_values()
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 895
                    self.compound_operator()
                    self.state = 896
                    self.select_or_values() 
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 903
                self.match(SqlParser.K_ORDER)
                self.state = 904
                self.match(SqlParser.K_BY)
                self.state = 905
                self.ordering_term()
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 906
                        self.match(SqlParser.COMMA)
                        self.state = 907
                        self.ordering_term() 
                    self.state = 912
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)



            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 915
                self.match(SqlParser.K_LIMIT)
                self.state = 916
                self.expr(0)
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 917
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 918
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SqlParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = SqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.match(SqlParser.K_SELECT)
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 924
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.K_ALL or _la==SqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 927
                self.result_column()
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 928
                        self.match(SqlParser.COMMA)
                        self.state = 929
                        self.result_column() 
                    self.state = 934
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 935
                    self.match(SqlParser.K_FROM)
                    self.state = 945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                    if la_ == 1:
                        self.state = 936
                        self.table_or_subquery()
                        self.state = 941
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 937
                                self.match(SqlParser.COMMA)
                                self.state = 938
                                self.table_or_subquery() 
                            self.state = 943
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 944
                        self.join_clause()
                        pass




                self.state = 951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(SqlParser.K_WHERE)
                    self.state = 950
                    self.expr(0)


                self.state = 967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 953
                    self.match(SqlParser.K_GROUP)
                    self.state = 954
                    self.match(SqlParser.K_BY)
                    self.state = 955
                    self.expr(0)
                    self.state = 960
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 956
                            self.match(SqlParser.COMMA)
                            self.state = 957
                            self.expr(0) 
                        self.state = 962
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

                    self.state = 965
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        self.state = 963
                        self.match(SqlParser.K_HAVING)
                        self.state = 964
                        self.expr(0)




                pass
            elif token in [SqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(SqlParser.K_VALUES)
                self.state = 970
                self.match(SqlParser.OPEN_PAR)
                self.state = 971
                self.expr(0)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 972
                    self.match(SqlParser.COMMA)
                    self.state = 973
                    self.expr(0)
                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 979
                self.match(SqlParser.CLOSE_PAR)
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 980
                        self.match(SqlParser.COMMA)
                        self.state = 981
                        self.match(SqlParser.OPEN_PAR)
                        self.state = 982
                        self.expr(0)
                        self.state = 987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlParser.COMMA:
                            self.state = 983
                            self.match(SqlParser.COMMA)
                            self.state = 984
                            self.expr(0)
                            self.state = 989
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 990
                        self.match(SqlParser.CLOSE_PAR) 
                    self.state = 996
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 999
                self.with_clause()


            self.state = 1002
            self.match(SqlParser.K_UPDATE)
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1003
                self.match(SqlParser.K_OR)
                self.state = 1004
                self.match(SqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 1005
                self.match(SqlParser.K_OR)
                self.state = 1006
                self.match(SqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 1007
                self.match(SqlParser.K_OR)
                self.state = 1008
                self.match(SqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 1009
                self.match(SqlParser.K_OR)
                self.state = 1010
                self.match(SqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 1011
                self.match(SqlParser.K_OR)
                self.state = 1012
                self.match(SqlParser.K_IGNORE)


            self.state = 1015
            self.qualified_table_name()
            self.state = 1016
            self.match(SqlParser.K_SET)
            self.state = 1017
            self.column_name()
            self.state = 1018
            self.match(SqlParser.ASSIGN)
            self.state = 1019
            self.expr(0)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1020
                self.match(SqlParser.COMMA)
                self.state = 1021
                self.column_name()
                self.state = 1022
                self.match(SqlParser.ASSIGN)
                self.state = 1023
                self.expr(0)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHERE:
                self.state = 1030
                self.match(SqlParser.K_WHERE)
                self.state = 1031
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(SqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(SqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(SqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(SqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WITH:
                self.state = 1034
                self.with_clause()


            self.state = 1037
            self.match(SqlParser.K_UPDATE)
            self.state = 1048
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.match(SqlParser.K_OR)
                self.state = 1039
                self.match(SqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 1040
                self.match(SqlParser.K_OR)
                self.state = 1041
                self.match(SqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 1042
                self.match(SqlParser.K_OR)
                self.state = 1043
                self.match(SqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 1044
                self.match(SqlParser.K_OR)
                self.state = 1045
                self.match(SqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 1046
                self.match(SqlParser.K_OR)
                self.state = 1047
                self.match(SqlParser.K_IGNORE)


            self.state = 1050
            self.qualified_table_name()
            self.state = 1051
            self.match(SqlParser.K_SET)
            self.state = 1052
            self.column_name()
            self.state = 1053
            self.match(SqlParser.ASSIGN)
            self.state = 1054
            self.expr(0)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1055
                self.match(SqlParser.COMMA)
                self.state = 1056
                self.column_name()
                self.state = 1057
                self.match(SqlParser.ASSIGN)
                self.state = 1058
                self.expr(0)
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_WHERE:
                self.state = 1065
                self.match(SqlParser.K_WHERE)
                self.state = 1066
                self.expr(0)


            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_LIMIT or _la==SqlParser.K_ORDER:
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_ORDER:
                    self.state = 1069
                    self.match(SqlParser.K_ORDER)
                    self.state = 1070
                    self.match(SqlParser.K_BY)
                    self.state = 1071
                    self.ordering_term()
                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 1072
                        self.match(SqlParser.COMMA)
                        self.state = 1073
                        self.ordering_term()
                        self.state = 1078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1081
                self.match(SqlParser.K_LIMIT)
                self.state = 1082
                self.expr(0)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.COMMA or _la==SqlParser.K_OFFSET:
                    self.state = 1083
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.COMMA or _la==SqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1084
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(SqlParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SqlParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(SqlParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SqlParser.Column_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_constraintContext,i)


        def type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Type_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Type_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.column_name()
            self.state = 1096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1094
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1092
                        self.column_constraint()
                        pass

                    elif la_ == 2:
                        self.state = 1093
                        self.type_name()
                        pass

             
                self.state = 1098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SqlParser.Signed_numberContext,i)


        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Any_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.name()
            self.state = 1119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1100
                self.match(SqlParser.OPEN_PAR)
                self.state = 1101
                self.signed_number()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.OPEN_PAR) | (1 << SqlParser.K_ABORT) | (1 << SqlParser.K_ACTION) | (1 << SqlParser.K_ADD) | (1 << SqlParser.K_AFTER) | (1 << SqlParser.K_ALL) | (1 << SqlParser.K_ALTER) | (1 << SqlParser.K_ANALYZE) | (1 << SqlParser.K_AND) | (1 << SqlParser.K_AS) | (1 << SqlParser.K_ASC) | (1 << SqlParser.K_ATTACH) | (1 << SqlParser.K_AUTOINCREMENT) | (1 << SqlParser.K_BEFORE) | (1 << SqlParser.K_BEGIN) | (1 << SqlParser.K_BETWEEN) | (1 << SqlParser.K_BY) | (1 << SqlParser.K_CASCADE) | (1 << SqlParser.K_CASE) | (1 << SqlParser.K_CAST) | (1 << SqlParser.K_CHECK) | (1 << SqlParser.K_COLLATE) | (1 << SqlParser.K_COLUMN) | (1 << SqlParser.K_COMMIT) | (1 << SqlParser.K_CONFLICT) | (1 << SqlParser.K_CONSTRAINT) | (1 << SqlParser.K_CREATE) | (1 << SqlParser.K_CROSS) | (1 << SqlParser.K_CURRENT_DATE) | (1 << SqlParser.K_CURRENT_TIME) | (1 << SqlParser.K_CURRENT_TIMESTAMP) | (1 << SqlParser.K_DATABASE) | (1 << SqlParser.K_DEFAULT) | (1 << SqlParser.K_DEFERRABLE) | (1 << SqlParser.K_DEFERRED) | (1 << SqlParser.K_DELETE) | (1 << SqlParser.K_DESC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlParser.K_DETACH - 64)) | (1 << (SqlParser.K_DISTINCT - 64)) | (1 << (SqlParser.K_DROP - 64)) | (1 << (SqlParser.K_EACH - 64)) | (1 << (SqlParser.K_ELSE - 64)) | (1 << (SqlParser.K_END - 64)) | (1 << (SqlParser.K_ENABLE - 64)) | (1 << (SqlParser.K_ESCAPE - 64)) | (1 << (SqlParser.K_EXCEPT - 64)) | (1 << (SqlParser.K_EXCLUSIVE - 64)) | (1 << (SqlParser.K_EXISTS - 64)) | (1 << (SqlParser.K_EXPLAIN - 64)) | (1 << (SqlParser.K_FAIL - 64)) | (1 << (SqlParser.K_FOR - 64)) | (1 << (SqlParser.K_FOREIGN - 64)) | (1 << (SqlParser.K_FROM - 64)) | (1 << (SqlParser.K_FULL - 64)) | (1 << (SqlParser.K_GLOB - 64)) | (1 << (SqlParser.K_GROUP - 64)) | (1 << (SqlParser.K_HAVING - 64)) | (1 << (SqlParser.K_IF - 64)) | (1 << (SqlParser.K_IGNORE - 64)) | (1 << (SqlParser.K_IMMEDIATE - 64)) | (1 << (SqlParser.K_IN - 64)) | (1 << (SqlParser.K_INDEX - 64)) | (1 << (SqlParser.K_INDEXED - 64)) | (1 << (SqlParser.K_INITIALLY - 64)) | (1 << (SqlParser.K_INNER - 64)) | (1 << (SqlParser.K_INSERT - 64)) | (1 << (SqlParser.K_INSTEAD - 64)) | (1 << (SqlParser.K_INTERSECT - 64)) | (1 << (SqlParser.K_INTO - 64)) | (1 << (SqlParser.K_IS - 64)) | (1 << (SqlParser.K_ISNULL - 64)) | (1 << (SqlParser.K_JOIN - 64)) | (1 << (SqlParser.K_KEY - 64)) | (1 << (SqlParser.K_LEFT - 64)) | (1 << (SqlParser.K_LIKE - 64)) | (1 << (SqlParser.K_LIMIT - 64)) | (1 << (SqlParser.K_MATCH - 64)) | (1 << (SqlParser.K_NATURAL - 64)) | (1 << (SqlParser.K_NEXTVAL - 64)) | (1 << (SqlParser.K_NO - 64)) | (1 << (SqlParser.K_NOT - 64)) | (1 << (SqlParser.K_NOTNULL - 64)) | (1 << (SqlParser.K_NULL - 64)) | (1 << (SqlParser.K_OF - 64)) | (1 << (SqlParser.K_OFFSET - 64)) | (1 << (SqlParser.K_ON - 64)) | (1 << (SqlParser.K_OR - 64)) | (1 << (SqlParser.K_ORDER - 64)) | (1 << (SqlParser.K_OUTER - 64)) | (1 << (SqlParser.K_PLAN - 64)) | (1 << (SqlParser.K_PRAGMA - 64)) | (1 << (SqlParser.K_PRIMARY - 64)) | (1 << (SqlParser.K_QUERY - 64)) | (1 << (SqlParser.K_RAISE - 64)) | (1 << (SqlParser.K_RECURSIVE - 64)) | (1 << (SqlParser.K_REFERENCES - 64)) | (1 << (SqlParser.K_REGEXP - 64)) | (1 << (SqlParser.K_REINDEX - 64)) | (1 << (SqlParser.K_RELEASE - 64)) | (1 << (SqlParser.K_RENAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlParser.K_REPLACE - 128)) | (1 << (SqlParser.K_RESTRICT - 128)) | (1 << (SqlParser.K_RIGHT - 128)) | (1 << (SqlParser.K_ROLLBACK - 128)) | (1 << (SqlParser.K_ROW - 128)) | (1 << (SqlParser.K_SAVEPOINT - 128)) | (1 << (SqlParser.K_SELECT - 128)) | (1 << (SqlParser.K_SET - 128)) | (1 << (SqlParser.K_TABLE - 128)) | (1 << (SqlParser.K_TEMP - 128)) | (1 << (SqlParser.K_TEMPORARY - 128)) | (1 << (SqlParser.K_THEN - 128)) | (1 << (SqlParser.K_TO - 128)) | (1 << (SqlParser.K_TRANSACTION - 128)) | (1 << (SqlParser.K_TRIGGER - 128)) | (1 << (SqlParser.K_UNION - 128)) | (1 << (SqlParser.K_UNIQUE - 128)) | (1 << (SqlParser.K_UPDATE - 128)) | (1 << (SqlParser.K_USING - 128)) | (1 << (SqlParser.K_VACUUM - 128)) | (1 << (SqlParser.K_VALUES - 128)) | (1 << (SqlParser.K_VIEW - 128)) | (1 << (SqlParser.K_VIRTUAL - 128)) | (1 << (SqlParser.K_WHEN - 128)) | (1 << (SqlParser.K_WHERE - 128)) | (1 << (SqlParser.K_WITH - 128)) | (1 << (SqlParser.K_WITHOUT - 128)) | (1 << (SqlParser.IDENTIFIER - 128)) | (1 << (SqlParser.STRING_LITERAL - 128)))) != 0):
                    self.state = 1102
                    self.any_name()


                self.state = 1105
                self.match(SqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 1107
                self.match(SqlParser.OPEN_PAR)
                self.state = 1108
                self.signed_number()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.OPEN_PAR) | (1 << SqlParser.K_ABORT) | (1 << SqlParser.K_ACTION) | (1 << SqlParser.K_ADD) | (1 << SqlParser.K_AFTER) | (1 << SqlParser.K_ALL) | (1 << SqlParser.K_ALTER) | (1 << SqlParser.K_ANALYZE) | (1 << SqlParser.K_AND) | (1 << SqlParser.K_AS) | (1 << SqlParser.K_ASC) | (1 << SqlParser.K_ATTACH) | (1 << SqlParser.K_AUTOINCREMENT) | (1 << SqlParser.K_BEFORE) | (1 << SqlParser.K_BEGIN) | (1 << SqlParser.K_BETWEEN) | (1 << SqlParser.K_BY) | (1 << SqlParser.K_CASCADE) | (1 << SqlParser.K_CASE) | (1 << SqlParser.K_CAST) | (1 << SqlParser.K_CHECK) | (1 << SqlParser.K_COLLATE) | (1 << SqlParser.K_COLUMN) | (1 << SqlParser.K_COMMIT) | (1 << SqlParser.K_CONFLICT) | (1 << SqlParser.K_CONSTRAINT) | (1 << SqlParser.K_CREATE) | (1 << SqlParser.K_CROSS) | (1 << SqlParser.K_CURRENT_DATE) | (1 << SqlParser.K_CURRENT_TIME) | (1 << SqlParser.K_CURRENT_TIMESTAMP) | (1 << SqlParser.K_DATABASE) | (1 << SqlParser.K_DEFAULT) | (1 << SqlParser.K_DEFERRABLE) | (1 << SqlParser.K_DEFERRED) | (1 << SqlParser.K_DELETE) | (1 << SqlParser.K_DESC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlParser.K_DETACH - 64)) | (1 << (SqlParser.K_DISTINCT - 64)) | (1 << (SqlParser.K_DROP - 64)) | (1 << (SqlParser.K_EACH - 64)) | (1 << (SqlParser.K_ELSE - 64)) | (1 << (SqlParser.K_END - 64)) | (1 << (SqlParser.K_ENABLE - 64)) | (1 << (SqlParser.K_ESCAPE - 64)) | (1 << (SqlParser.K_EXCEPT - 64)) | (1 << (SqlParser.K_EXCLUSIVE - 64)) | (1 << (SqlParser.K_EXISTS - 64)) | (1 << (SqlParser.K_EXPLAIN - 64)) | (1 << (SqlParser.K_FAIL - 64)) | (1 << (SqlParser.K_FOR - 64)) | (1 << (SqlParser.K_FOREIGN - 64)) | (1 << (SqlParser.K_FROM - 64)) | (1 << (SqlParser.K_FULL - 64)) | (1 << (SqlParser.K_GLOB - 64)) | (1 << (SqlParser.K_GROUP - 64)) | (1 << (SqlParser.K_HAVING - 64)) | (1 << (SqlParser.K_IF - 64)) | (1 << (SqlParser.K_IGNORE - 64)) | (1 << (SqlParser.K_IMMEDIATE - 64)) | (1 << (SqlParser.K_IN - 64)) | (1 << (SqlParser.K_INDEX - 64)) | (1 << (SqlParser.K_INDEXED - 64)) | (1 << (SqlParser.K_INITIALLY - 64)) | (1 << (SqlParser.K_INNER - 64)) | (1 << (SqlParser.K_INSERT - 64)) | (1 << (SqlParser.K_INSTEAD - 64)) | (1 << (SqlParser.K_INTERSECT - 64)) | (1 << (SqlParser.K_INTO - 64)) | (1 << (SqlParser.K_IS - 64)) | (1 << (SqlParser.K_ISNULL - 64)) | (1 << (SqlParser.K_JOIN - 64)) | (1 << (SqlParser.K_KEY - 64)) | (1 << (SqlParser.K_LEFT - 64)) | (1 << (SqlParser.K_LIKE - 64)) | (1 << (SqlParser.K_LIMIT - 64)) | (1 << (SqlParser.K_MATCH - 64)) | (1 << (SqlParser.K_NATURAL - 64)) | (1 << (SqlParser.K_NEXTVAL - 64)) | (1 << (SqlParser.K_NO - 64)) | (1 << (SqlParser.K_NOT - 64)) | (1 << (SqlParser.K_NOTNULL - 64)) | (1 << (SqlParser.K_NULL - 64)) | (1 << (SqlParser.K_OF - 64)) | (1 << (SqlParser.K_OFFSET - 64)) | (1 << (SqlParser.K_ON - 64)) | (1 << (SqlParser.K_OR - 64)) | (1 << (SqlParser.K_ORDER - 64)) | (1 << (SqlParser.K_OUTER - 64)) | (1 << (SqlParser.K_PLAN - 64)) | (1 << (SqlParser.K_PRAGMA - 64)) | (1 << (SqlParser.K_PRIMARY - 64)) | (1 << (SqlParser.K_QUERY - 64)) | (1 << (SqlParser.K_RAISE - 64)) | (1 << (SqlParser.K_RECURSIVE - 64)) | (1 << (SqlParser.K_REFERENCES - 64)) | (1 << (SqlParser.K_REGEXP - 64)) | (1 << (SqlParser.K_REINDEX - 64)) | (1 << (SqlParser.K_RELEASE - 64)) | (1 << (SqlParser.K_RENAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlParser.K_REPLACE - 128)) | (1 << (SqlParser.K_RESTRICT - 128)) | (1 << (SqlParser.K_RIGHT - 128)) | (1 << (SqlParser.K_ROLLBACK - 128)) | (1 << (SqlParser.K_ROW - 128)) | (1 << (SqlParser.K_SAVEPOINT - 128)) | (1 << (SqlParser.K_SELECT - 128)) | (1 << (SqlParser.K_SET - 128)) | (1 << (SqlParser.K_TABLE - 128)) | (1 << (SqlParser.K_TEMP - 128)) | (1 << (SqlParser.K_TEMPORARY - 128)) | (1 << (SqlParser.K_THEN - 128)) | (1 << (SqlParser.K_TO - 128)) | (1 << (SqlParser.K_TRANSACTION - 128)) | (1 << (SqlParser.K_TRIGGER - 128)) | (1 << (SqlParser.K_UNION - 128)) | (1 << (SqlParser.K_UNIQUE - 128)) | (1 << (SqlParser.K_UPDATE - 128)) | (1 << (SqlParser.K_USING - 128)) | (1 << (SqlParser.K_VACUUM - 128)) | (1 << (SqlParser.K_VALUES - 128)) | (1 << (SqlParser.K_VIEW - 128)) | (1 << (SqlParser.K_VIRTUAL - 128)) | (1 << (SqlParser.K_WHEN - 128)) | (1 << (SqlParser.K_WHERE - 128)) | (1 << (SqlParser.K_WITH - 128)) | (1 << (SqlParser.K_WITHOUT - 128)) | (1 << (SqlParser.IDENTIFIER - 128)) | (1 << (SqlParser.STRING_LITERAL - 128)))) != 0):
                    self.state = 1109
                    self.any_name()


                self.state = 1112
                self.match(SqlParser.COMMA)
                self.state = 1113
                self.signed_number()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.T__1) | (1 << SqlParser.OPEN_PAR) | (1 << SqlParser.K_ABORT) | (1 << SqlParser.K_ACTION) | (1 << SqlParser.K_ADD) | (1 << SqlParser.K_AFTER) | (1 << SqlParser.K_ALL) | (1 << SqlParser.K_ALTER) | (1 << SqlParser.K_ANALYZE) | (1 << SqlParser.K_AND) | (1 << SqlParser.K_AS) | (1 << SqlParser.K_ASC) | (1 << SqlParser.K_ATTACH) | (1 << SqlParser.K_AUTOINCREMENT) | (1 << SqlParser.K_BEFORE) | (1 << SqlParser.K_BEGIN) | (1 << SqlParser.K_BETWEEN) | (1 << SqlParser.K_BY) | (1 << SqlParser.K_CASCADE) | (1 << SqlParser.K_CASE) | (1 << SqlParser.K_CAST) | (1 << SqlParser.K_CHECK) | (1 << SqlParser.K_COLLATE) | (1 << SqlParser.K_COLUMN) | (1 << SqlParser.K_COMMIT) | (1 << SqlParser.K_CONFLICT) | (1 << SqlParser.K_CONSTRAINT) | (1 << SqlParser.K_CREATE) | (1 << SqlParser.K_CROSS) | (1 << SqlParser.K_CURRENT_DATE) | (1 << SqlParser.K_CURRENT_TIME) | (1 << SqlParser.K_CURRENT_TIMESTAMP) | (1 << SqlParser.K_DATABASE) | (1 << SqlParser.K_DEFAULT) | (1 << SqlParser.K_DEFERRABLE) | (1 << SqlParser.K_DEFERRED) | (1 << SqlParser.K_DELETE) | (1 << SqlParser.K_DESC))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlParser.K_DETACH - 64)) | (1 << (SqlParser.K_DISTINCT - 64)) | (1 << (SqlParser.K_DROP - 64)) | (1 << (SqlParser.K_EACH - 64)) | (1 << (SqlParser.K_ELSE - 64)) | (1 << (SqlParser.K_END - 64)) | (1 << (SqlParser.K_ENABLE - 64)) | (1 << (SqlParser.K_ESCAPE - 64)) | (1 << (SqlParser.K_EXCEPT - 64)) | (1 << (SqlParser.K_EXCLUSIVE - 64)) | (1 << (SqlParser.K_EXISTS - 64)) | (1 << (SqlParser.K_EXPLAIN - 64)) | (1 << (SqlParser.K_FAIL - 64)) | (1 << (SqlParser.K_FOR - 64)) | (1 << (SqlParser.K_FOREIGN - 64)) | (1 << (SqlParser.K_FROM - 64)) | (1 << (SqlParser.K_FULL - 64)) | (1 << (SqlParser.K_GLOB - 64)) | (1 << (SqlParser.K_GROUP - 64)) | (1 << (SqlParser.K_HAVING - 64)) | (1 << (SqlParser.K_IF - 64)) | (1 << (SqlParser.K_IGNORE - 64)) | (1 << (SqlParser.K_IMMEDIATE - 64)) | (1 << (SqlParser.K_IN - 64)) | (1 << (SqlParser.K_INDEX - 64)) | (1 << (SqlParser.K_INDEXED - 64)) | (1 << (SqlParser.K_INITIALLY - 64)) | (1 << (SqlParser.K_INNER - 64)) | (1 << (SqlParser.K_INSERT - 64)) | (1 << (SqlParser.K_INSTEAD - 64)) | (1 << (SqlParser.K_INTERSECT - 64)) | (1 << (SqlParser.K_INTO - 64)) | (1 << (SqlParser.K_IS - 64)) | (1 << (SqlParser.K_ISNULL - 64)) | (1 << (SqlParser.K_JOIN - 64)) | (1 << (SqlParser.K_KEY - 64)) | (1 << (SqlParser.K_LEFT - 64)) | (1 << (SqlParser.K_LIKE - 64)) | (1 << (SqlParser.K_LIMIT - 64)) | (1 << (SqlParser.K_MATCH - 64)) | (1 << (SqlParser.K_NATURAL - 64)) | (1 << (SqlParser.K_NEXTVAL - 64)) | (1 << (SqlParser.K_NO - 64)) | (1 << (SqlParser.K_NOT - 64)) | (1 << (SqlParser.K_NOTNULL - 64)) | (1 << (SqlParser.K_NULL - 64)) | (1 << (SqlParser.K_OF - 64)) | (1 << (SqlParser.K_OFFSET - 64)) | (1 << (SqlParser.K_ON - 64)) | (1 << (SqlParser.K_OR - 64)) | (1 << (SqlParser.K_ORDER - 64)) | (1 << (SqlParser.K_OUTER - 64)) | (1 << (SqlParser.K_PLAN - 64)) | (1 << (SqlParser.K_PRAGMA - 64)) | (1 << (SqlParser.K_PRIMARY - 64)) | (1 << (SqlParser.K_QUERY - 64)) | (1 << (SqlParser.K_RAISE - 64)) | (1 << (SqlParser.K_RECURSIVE - 64)) | (1 << (SqlParser.K_REFERENCES - 64)) | (1 << (SqlParser.K_REGEXP - 64)) | (1 << (SqlParser.K_REINDEX - 64)) | (1 << (SqlParser.K_RELEASE - 64)) | (1 << (SqlParser.K_RENAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlParser.K_REPLACE - 128)) | (1 << (SqlParser.K_RESTRICT - 128)) | (1 << (SqlParser.K_RIGHT - 128)) | (1 << (SqlParser.K_ROLLBACK - 128)) | (1 << (SqlParser.K_ROW - 128)) | (1 << (SqlParser.K_SAVEPOINT - 128)) | (1 << (SqlParser.K_SELECT - 128)) | (1 << (SqlParser.K_SET - 128)) | (1 << (SqlParser.K_TABLE - 128)) | (1 << (SqlParser.K_TEMP - 128)) | (1 << (SqlParser.K_TEMPORARY - 128)) | (1 << (SqlParser.K_THEN - 128)) | (1 << (SqlParser.K_TO - 128)) | (1 << (SqlParser.K_TRANSACTION - 128)) | (1 << (SqlParser.K_TRIGGER - 128)) | (1 << (SqlParser.K_UNION - 128)) | (1 << (SqlParser.K_UNIQUE - 128)) | (1 << (SqlParser.K_UPDATE - 128)) | (1 << (SqlParser.K_USING - 128)) | (1 << (SqlParser.K_VACUUM - 128)) | (1 << (SqlParser.K_VALUES - 128)) | (1 << (SqlParser.K_VIEW - 128)) | (1 << (SqlParser.K_VIRTUAL - 128)) | (1 << (SqlParser.K_WHEN - 128)) | (1 << (SqlParser.K_WHERE - 128)) | (1 << (SqlParser.K_WITH - 128)) | (1 << (SqlParser.K_WITHOUT - 128)) | (1 << (SqlParser.IDENTIFIER - 128)) | (1 << (SqlParser.STRING_LITERAL - 128)))) != 0):
                    self.state = 1114
                    self.any_name()


                self.state = 1117
                self.match(SqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_constraint_primary_key(self):
            return self.getTypedRuleContext(SqlParser.Column_constraint_primary_keyContext,0)


        def column_constraint_foreign_key(self):
            return self.getTypedRuleContext(SqlParser.Column_constraint_foreign_keyContext,0)


        def column_constraint_not_null(self):
            return self.getTypedRuleContext(SqlParser.Column_constraint_not_nullContext,0)


        def column_constraint_null(self):
            return self.getTypedRuleContext(SqlParser.Column_constraint_nullContext,0)


        def K_UNIQUE(self):
            return self.getToken(SqlParser.K_UNIQUE, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def column_default(self):
            return self.getTypedRuleContext(SqlParser.Column_defaultContext,0)


        def K_COLLATE(self):
            return self.getToken(SqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SqlParser.Collation_nameContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_CONSTRAINT:
                self.state = 1121
                self.match(SqlParser.K_CONSTRAINT)
                self.state = 1122
                self.name()


            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_PRIMARY]:
                self.state = 1125
                self.column_constraint_primary_key()
                pass
            elif token in [SqlParser.K_REFERENCES]:
                self.state = 1126
                self.column_constraint_foreign_key()
                pass
            elif token in [SqlParser.K_NOT]:
                self.state = 1127
                self.column_constraint_not_null()
                pass
            elif token in [SqlParser.K_NULL]:
                self.state = 1128
                self.column_constraint_null()
                pass
            elif token in [SqlParser.K_UNIQUE]:
                self.state = 1129
                self.match(SqlParser.K_UNIQUE)
                self.state = 1130
                self.conflict_clause()
                pass
            elif token in [SqlParser.K_CHECK]:
                self.state = 1131
                self.match(SqlParser.K_CHECK)
                self.state = 1132
                self.match(SqlParser.OPEN_PAR)
                self.state = 1133
                self.expr(0)
                self.state = 1134
                self.match(SqlParser.CLOSE_PAR)
                pass
            elif token in [SqlParser.K_DEFAULT]:
                self.state = 1136
                self.column_default()
                pass
            elif token in [SqlParser.K_COLLATE]:
                self.state = 1137
                self.match(SqlParser.K_COLLATE)
                self.state = 1138
                self.collation_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraint_primary_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SqlParser.K_AUTOINCREMENT, 0)

        def K_ASC(self):
            return self.getToken(SqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_column_constraint_primary_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_primary_key" ):
                listener.enterColumn_constraint_primary_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_primary_key" ):
                listener.exitColumn_constraint_primary_key(self)




    def column_constraint_primary_key(self):

        localctx = SqlParser.Column_constraint_primary_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_column_constraint_primary_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(SqlParser.K_PRIMARY)
            self.state = 1142
            self.match(SqlParser.K_KEY)
            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1143
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_ASC or _la==SqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1146
            self.conflict_clause()
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1147
                self.match(SqlParser.K_AUTOINCREMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraint_foreign_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreign_key_clause(self):
            return self.getTypedRuleContext(SqlParser.Foreign_key_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_constraint_foreign_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_foreign_key" ):
                listener.enterColumn_constraint_foreign_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_foreign_key" ):
                listener.exitColumn_constraint_foreign_key(self)




    def column_constraint_foreign_key(self):

        localctx = SqlParser.Column_constraint_foreign_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_column_constraint_foreign_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.foreign_key_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraint_not_nullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_NULL(self):
            return self.getToken(SqlParser.K_NULL, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_constraint_not_null

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_not_null" ):
                listener.enterColumn_constraint_not_null(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_not_null" ):
                listener.exitColumn_constraint_not_null(self)




    def column_constraint_not_null(self):

        localctx = SqlParser.Column_constraint_not_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_column_constraint_not_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(SqlParser.K_NOT)
            self.state = 1153
            self.match(SqlParser.K_NULL)
            self.state = 1154
            self.conflict_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraint_nullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(SqlParser.K_NULL, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_constraint_null

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_null" ):
                listener.enterColumn_constraint_null(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_null" ):
                listener.exitColumn_constraint_null(self)




    def column_constraint_null(self):

        localctx = SqlParser.Column_constraint_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_column_constraint_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(SqlParser.K_NULL)
            self.state = 1157
            self.conflict_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DEFAULT(self):
            return self.getToken(SqlParser.K_DEFAULT, 0)

        def column_default_value(self):
            return self.getTypedRuleContext(SqlParser.Column_default_valueContext,0)


        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def K_NEXTVAL(self):
            return self.getToken(SqlParser.K_NEXTVAL, 0)

        def any_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Any_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Any_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_column_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_default" ):
                listener.enterColumn_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_default" ):
                listener.exitColumn_default(self)




    def column_default(self):

        localctx = SqlParser.Column_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_column_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(SqlParser.K_DEFAULT)
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1160
                self.column_default_value()
                pass

            elif la_ == 2:
                self.state = 1161
                self.match(SqlParser.OPEN_PAR)
                self.state = 1162
                self.expr(0)
                self.state = 1163
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.state = 1165
                self.match(SqlParser.K_NEXTVAL)
                self.state = 1166
                self.match(SqlParser.OPEN_PAR)
                self.state = 1167
                self.expr(0)
                self.state = 1168
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.state = 1170
                self.any_name()
                pass


            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1173
                self.match(SqlParser.T__0)
                self.state = 1175 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1174
                        self.any_name()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1177 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SqlParser.Literal_valueContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_default_value" ):
                listener.enterColumn_default_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_default_value" ):
                listener.exitColumn_default_value(self)




    def column_default_value(self):

        localctx = SqlParser.Column_default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_column_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.signed_number()
                pass

            elif la_ == 2:
                self.state = 1182
                self.literal_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SqlParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SqlParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SqlParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SqlParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1185
                self.match(SqlParser.K_ON)
                self.state = 1186
                self.match(SqlParser.K_CONFLICT)
                self.state = 1187
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_ABORT or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (SqlParser.K_FAIL - 76)) | (1 << (SqlParser.K_IGNORE - 76)) | (1 << (SqlParser.K_REPLACE - 76)) | (1 << (SqlParser.K_ROLLBACK - 76)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SqlParser.Function_nameContext,0)


        def K_DISTINCT(self):
            return self.getToken(SqlParser.K_DISTINCT, 0)

        def K_CAST(self):
            return self.getToken(SqlParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SqlParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_WHEN)
            else:
                return self.getToken(SqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_THEN)
            else:
                return self.getToken(SqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SqlParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SqlParser.Raise_functionContext,0)


        def K_IS(self):
            return self.getToken(SqlParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SqlParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SqlParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SqlParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SqlParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SqlParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SqlParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SqlParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1191
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 1192
                self.match(SqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 1193
                        self.database_name()
                        self.state = 1194
                        self.match(SqlParser.DOT)


                    self.state = 1198
                    self.table_name()
                    self.state = 1199
                    self.match(SqlParser.DOT)


                self.state = 1203
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 1204
                self.unary_operator()
                self.state = 1205
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 1207
                self.function_name()
                self.state = 1208
                self.match(SqlParser.OPEN_PAR)
                self.state = 1221
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlParser.T__1, SqlParser.OPEN_PAR, SqlParser.PLUS, SqlParser.MINUS, SqlParser.TILDE, SqlParser.K_ABORT, SqlParser.K_ACTION, SqlParser.K_ADD, SqlParser.K_AFTER, SqlParser.K_ALL, SqlParser.K_ALTER, SqlParser.K_ANALYZE, SqlParser.K_AND, SqlParser.K_AS, SqlParser.K_ASC, SqlParser.K_ATTACH, SqlParser.K_AUTOINCREMENT, SqlParser.K_BEFORE, SqlParser.K_BEGIN, SqlParser.K_BETWEEN, SqlParser.K_BY, SqlParser.K_CASCADE, SqlParser.K_CASE, SqlParser.K_CAST, SqlParser.K_CHECK, SqlParser.K_COLLATE, SqlParser.K_COLUMN, SqlParser.K_COMMIT, SqlParser.K_CONFLICT, SqlParser.K_CONSTRAINT, SqlParser.K_CREATE, SqlParser.K_CROSS, SqlParser.K_CURRENT_DATE, SqlParser.K_CURRENT_TIME, SqlParser.K_CURRENT_TIMESTAMP, SqlParser.K_DATABASE, SqlParser.K_DEFAULT, SqlParser.K_DEFERRABLE, SqlParser.K_DEFERRED, SqlParser.K_DELETE, SqlParser.K_DESC, SqlParser.K_DETACH, SqlParser.K_DISTINCT, SqlParser.K_DROP, SqlParser.K_EACH, SqlParser.K_ELSE, SqlParser.K_END, SqlParser.K_ENABLE, SqlParser.K_ESCAPE, SqlParser.K_EXCEPT, SqlParser.K_EXCLUSIVE, SqlParser.K_EXISTS, SqlParser.K_EXPLAIN, SqlParser.K_FAIL, SqlParser.K_FOR, SqlParser.K_FOREIGN, SqlParser.K_FROM, SqlParser.K_FULL, SqlParser.K_GLOB, SqlParser.K_GROUP, SqlParser.K_HAVING, SqlParser.K_IF, SqlParser.K_IGNORE, SqlParser.K_IMMEDIATE, SqlParser.K_IN, SqlParser.K_INDEX, SqlParser.K_INDEXED, SqlParser.K_INITIALLY, SqlParser.K_INNER, SqlParser.K_INSERT, SqlParser.K_INSTEAD, SqlParser.K_INTERSECT, SqlParser.K_INTO, SqlParser.K_IS, SqlParser.K_ISNULL, SqlParser.K_JOIN, SqlParser.K_KEY, SqlParser.K_LEFT, SqlParser.K_LIKE, SqlParser.K_LIMIT, SqlParser.K_MATCH, SqlParser.K_NATURAL, SqlParser.K_NEXTVAL, SqlParser.K_NO, SqlParser.K_NOT, SqlParser.K_NOTNULL, SqlParser.K_NULL, SqlParser.K_OF, SqlParser.K_OFFSET, SqlParser.K_ON, SqlParser.K_OR, SqlParser.K_ORDER, SqlParser.K_OUTER, SqlParser.K_PLAN, SqlParser.K_PRAGMA, SqlParser.K_PRIMARY, SqlParser.K_QUERY, SqlParser.K_RAISE, SqlParser.K_RECURSIVE, SqlParser.K_REFERENCES, SqlParser.K_REGEXP, SqlParser.K_REINDEX, SqlParser.K_RELEASE, SqlParser.K_RENAME, SqlParser.K_REPLACE, SqlParser.K_RESTRICT, SqlParser.K_RIGHT, SqlParser.K_ROLLBACK, SqlParser.K_ROW, SqlParser.K_SAVEPOINT, SqlParser.K_SELECT, SqlParser.K_SET, SqlParser.K_TABLE, SqlParser.K_TEMP, SqlParser.K_TEMPORARY, SqlParser.K_THEN, SqlParser.K_TO, SqlParser.K_TRANSACTION, SqlParser.K_TRIGGER, SqlParser.K_UNION, SqlParser.K_UNIQUE, SqlParser.K_UPDATE, SqlParser.K_USING, SqlParser.K_VACUUM, SqlParser.K_VALUES, SqlParser.K_VIEW, SqlParser.K_VIRTUAL, SqlParser.K_WHEN, SqlParser.K_WHERE, SqlParser.K_WITH, SqlParser.K_WITHOUT, SqlParser.IDENTIFIER, SqlParser.NUMERIC_LITERAL, SqlParser.BIND_PARAMETER, SqlParser.STRING_LITERAL, SqlParser.BLOB_LITERAL]:
                    self.state = 1210
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1209
                        self.match(SqlParser.K_DISTINCT)


                    self.state = 1212
                    self.expr(0)
                    self.state = 1217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 1213
                        self.match(SqlParser.COMMA)
                        self.state = 1214
                        self.expr(0)
                        self.state = 1219
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlParser.STAR]:
                    self.state = 1220
                    self.match(SqlParser.STAR)
                    pass
                elif token in [SqlParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 1223
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 1225
                self.match(SqlParser.OPEN_PAR)
                self.state = 1226
                self.expr(0)
                self.state = 1227
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 1229
                self.match(SqlParser.K_CAST)
                self.state = 1230
                self.match(SqlParser.OPEN_PAR)
                self.state = 1231
                self.expr(0)
                self.state = 1232
                self.match(SqlParser.K_AS)
                self.state = 1233
                self.type_name()
                self.state = 1234
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_EXISTS or _la==SqlParser.K_NOT:
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlParser.K_NOT:
                        self.state = 1236
                        self.match(SqlParser.K_NOT)


                    self.state = 1239
                    self.match(SqlParser.K_EXISTS)


                self.state = 1242
                self.match(SqlParser.OPEN_PAR)
                self.state = 1243
                self.select_stmt()
                self.state = 1244
                self.match(SqlParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 1246
                self.match(SqlParser.K_CASE)
                self.state = 1248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1247
                    self.expr(0)


                self.state = 1255 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1250
                    self.match(SqlParser.K_WHEN)
                    self.state = 1251
                    self.expr(0)
                    self.state = 1252
                    self.match(SqlParser.K_THEN)
                    self.state = 1253
                    self.expr(0)
                    self.state = 1257 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlParser.K_WHEN):
                        break

                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_ELSE:
                    self.state = 1259
                    self.match(SqlParser.K_ELSE)
                    self.state = 1260
                    self.expr(0)


                self.state = 1263
                self.match(SqlParser.K_END)
                pass

            elif la_ == 10:
                self.state = 1265
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1366
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                    if la_ == 1:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1268
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1269
                        self.match(SqlParser.PIPE2)
                        self.state = 1270
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1271
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1272
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.STAR) | (1 << SqlParser.DIV) | (1 << SqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1273
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1274
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1275
                        _la = self._input.LA(1)
                        if not(_la==SqlParser.PLUS or _la==SqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1276
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1277
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1278
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.LT2) | (1 << SqlParser.GT2) | (1 << SqlParser.AMP) | (1 << SqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1279
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1280
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1281
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.LT) | (1 << SqlParser.LT_EQ) | (1 << SqlParser.GT) | (1 << SqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1282
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1283
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1296
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                        if la_ == 1:
                            self.state = 1284
                            self.match(SqlParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 1285
                            self.match(SqlParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 1286
                            self.match(SqlParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 1287
                            self.match(SqlParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 1288
                            self.match(SqlParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 1289
                            self.match(SqlParser.K_IS)
                            self.state = 1290
                            self.match(SqlParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 1291
                            self.match(SqlParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 1292
                            self.match(SqlParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 1293
                            self.match(SqlParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 1294
                            self.match(SqlParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 1295
                            self.match(SqlParser.K_REGEXP)
                            pass


                        self.state = 1298
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1299
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1300
                        self.match(SqlParser.K_AND)
                        self.state = 1301
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1302
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1303
                        self.match(SqlParser.K_OR)
                        self.state = 1304
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1305
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1306
                        self.match(SqlParser.K_IS)
                        self.state = 1308
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                        if la_ == 1:
                            self.state = 1307
                            self.match(SqlParser.K_NOT)


                        self.state = 1310
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1311
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlParser.K_NOT:
                            self.state = 1312
                            self.match(SqlParser.K_NOT)


                        self.state = 1315
                        self.match(SqlParser.K_BETWEEN)
                        self.state = 1316
                        self.expr(0)
                        self.state = 1317
                        self.match(SqlParser.K_AND)
                        self.state = 1318
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1320
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1321
                        self.match(SqlParser.K_COLLATE)
                        self.state = 1322
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1323
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1325
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlParser.K_NOT:
                            self.state = 1324
                            self.match(SqlParser.K_NOT)


                        self.state = 1327
                        _la = self._input.LA(1)
                        if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (SqlParser.K_GLOB - 81)) | (1 << (SqlParser.K_LIKE - 81)) | (1 << (SqlParser.K_MATCH - 81)) | (1 << (SqlParser.K_REGEXP - 81)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1328
                        self.expr(0)
                        self.state = 1331
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                        if la_ == 1:
                            self.state = 1329
                            self.match(SqlParser.K_ESCAPE)
                            self.state = 1330
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1333
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1338
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SqlParser.K_ISNULL]:
                            self.state = 1334
                            self.match(SqlParser.K_ISNULL)
                            pass
                        elif token in [SqlParser.K_NOTNULL]:
                            self.state = 1335
                            self.match(SqlParser.K_NOTNULL)
                            pass
                        elif token in [SqlParser.K_NOT]:
                            self.state = 1336
                            self.match(SqlParser.K_NOT)
                            self.state = 1337
                            self.match(SqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1340
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlParser.K_NOT:
                            self.state = 1341
                            self.match(SqlParser.K_NOT)


                        self.state = 1344
                        self.match(SqlParser.K_IN)
                        self.state = 1364
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                        if la_ == 1:
                            self.state = 1345
                            self.match(SqlParser.OPEN_PAR)
                            self.state = 1355
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                            if la_ == 1:
                                self.state = 1346
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1347
                                self.expr(0)
                                self.state = 1352
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SqlParser.COMMA:
                                    self.state = 1348
                                    self.match(SqlParser.COMMA)
                                    self.state = 1349
                                    self.expr(0)
                                    self.state = 1354
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1357
                            self.match(SqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1361
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                            if la_ == 1:
                                self.state = 1358
                                self.database_name()
                                self.state = 1359
                                self.match(SqlParser.DOT)


                            self.state = 1363
                            self.table_name()
                            pass


                        pass

             
                self.state = 1370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SqlParser.Foreign_tableContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def fk_target_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Fk_target_column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Fk_target_column_nameContext,i)


        def K_DEFERRABLE(self):
            return self.getToken(SqlParser.K_DEFERRABLE, 0)

        def K_ON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_ON)
            else:
                return self.getToken(SqlParser.K_ON, i)

        def K_MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_MATCH)
            else:
                return self.getToken(SqlParser.K_MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.NameContext)
            else:
                return self.getTypedRuleContext(SqlParser.NameContext,i)


        def K_DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_DELETE)
            else:
                return self.getToken(SqlParser.K_DELETE, i)

        def K_UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_UPDATE)
            else:
                return self.getToken(SqlParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SqlParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SqlParser.K_IMMEDIATE, 0)

        def K_ENABLE(self):
            return self.getToken(SqlParser.K_ENABLE, 0)

        def K_SET(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_SET)
            else:
                return self.getToken(SqlParser.K_SET, i)

        def K_NULL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_NULL)
            else:
                return self.getToken(SqlParser.K_NULL, i)

        def K_DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_DEFAULT)
            else:
                return self.getToken(SqlParser.K_DEFAULT, i)

        def K_CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_CASCADE)
            else:
                return self.getToken(SqlParser.K_CASCADE, i)

        def K_RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_RESTRICT)
            else:
                return self.getToken(SqlParser.K_RESTRICT, i)

        def K_NO(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_NO)
            else:
                return self.getToken(SqlParser.K_NO, i)

        def K_ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_ACTION)
            else:
                return self.getToken(SqlParser.K_ACTION, i)

        def getRuleIndex(self):
            return SqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(SqlParser.K_REFERENCES)
            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1372
                self.database_name()
                self.state = 1373
                self.match(SqlParser.DOT)


            self.state = 1377
            self.foreign_table()
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1378
                self.match(SqlParser.OPEN_PAR)
                self.state = 1379
                self.fk_target_column_name()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1380
                    self.match(SqlParser.COMMA)
                    self.state = 1381
                    self.fk_target_column_name()
                    self.state = 1386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1387
                self.match(SqlParser.CLOSE_PAR)


            self.state = 1409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1405
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlParser.K_ON]:
                        self.state = 1391
                        self.match(SqlParser.K_ON)
                        self.state = 1392
                        _la = self._input.LA(1)
                        if not(_la==SqlParser.K_DELETE or _la==SqlParser.K_UPDATE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1401
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                        if la_ == 1:
                            self.state = 1393
                            self.match(SqlParser.K_SET)
                            self.state = 1394
                            self.match(SqlParser.K_NULL)
                            pass

                        elif la_ == 2:
                            self.state = 1395
                            self.match(SqlParser.K_SET)
                            self.state = 1396
                            self.match(SqlParser.K_DEFAULT)
                            pass

                        elif la_ == 3:
                            self.state = 1397
                            self.match(SqlParser.K_CASCADE)
                            pass

                        elif la_ == 4:
                            self.state = 1398
                            self.match(SqlParser.K_RESTRICT)
                            pass

                        elif la_ == 5:
                            self.state = 1399
                            self.match(SqlParser.K_NO)
                            self.state = 1400
                            self.match(SqlParser.K_ACTION)
                            pass


                        pass
                    elif token in [SqlParser.K_MATCH]:
                        self.state = 1403
                        self.match(SqlParser.K_MATCH)
                        self.state = 1404
                        self.name()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 1425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_NOT:
                    self.state = 1412
                    self.match(SqlParser.K_NOT)


                self.state = 1415
                self.match(SqlParser.K_DEFERRABLE)
                self.state = 1420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(SqlParser.K_INITIALLY)
                    self.state = 1417
                    self.match(SqlParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 1418
                    self.match(SqlParser.K_INITIALLY)
                    self.state = 1419
                    self.match(SqlParser.K_IMMEDIATE)


                self.state = 1423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1422
                    self.match(SqlParser.K_ENABLE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fk_target_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_fk_target_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFk_target_column_name" ):
                listener.enterFk_target_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFk_target_column_name" ):
                listener.exitFk_target_column_name(self)




    def fk_target_column_name(self):

        localctx = SqlParser.Fk_target_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fk_target_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SqlParser.K_RAISE, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def error_message(self):
            return self.getTypedRuleContext(SqlParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SqlParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(SqlParser.K_RAISE)
            self.state = 1430
            self.match(SqlParser.OPEN_PAR)
            self.state = 1435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_IGNORE]:
                self.state = 1431
                self.match(SqlParser.K_IGNORE)
                pass
            elif token in [SqlParser.K_ABORT, SqlParser.K_FAIL, SqlParser.K_ROLLBACK]:
                self.state = 1432
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_ABORT or _la==SqlParser.K_FAIL or _la==SqlParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1433
                self.match(SqlParser.COMMA)
                self.state = 1434
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1437
            self.match(SqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SqlParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(SqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SqlParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.column_name()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_COLLATE:
                self.state = 1440
                self.match(SqlParser.K_COLLATE)
                self.state = 1441
                self.collation_name()


            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_ASC or _la==SqlParser.K_DESC:
                self.state = 1444
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_ASC or _la==SqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_constraint_primary_key(self):
            return self.getTypedRuleContext(SqlParser.Table_constraint_primary_keyContext,0)


        def table_constraint_key(self):
            return self.getTypedRuleContext(SqlParser.Table_constraint_keyContext,0)


        def table_constraint_unique(self):
            return self.getTypedRuleContext(SqlParser.Table_constraint_uniqueContext,0)


        def K_CHECK(self):
            return self.getToken(SqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def table_constraint_foreign_key(self):
            return self.getTypedRuleContext(SqlParser.Table_constraint_foreign_keyContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.K_CONSTRAINT:
                self.state = 1447
                self.match(SqlParser.K_CONSTRAINT)
                self.state = 1448
                self.name()


            self.state = 1460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_PRIMARY]:
                self.state = 1451
                self.table_constraint_primary_key()
                pass
            elif token in [SqlParser.K_KEY]:
                self.state = 1452
                self.table_constraint_key()
                pass
            elif token in [SqlParser.K_UNIQUE]:
                self.state = 1453
                self.table_constraint_unique()
                pass
            elif token in [SqlParser.K_CHECK]:
                self.state = 1454
                self.match(SqlParser.K_CHECK)
                self.state = 1455
                self.match(SqlParser.OPEN_PAR)
                self.state = 1456
                self.expr(0)
                self.state = 1457
                self.match(SqlParser.CLOSE_PAR)
                pass
            elif token in [SqlParser.K_FOREIGN]:
                self.state = 1459
                self.table_constraint_foreign_key()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraint_primary_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Indexed_columnContext,i)


        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_constraint_primary_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint_primary_key" ):
                listener.enterTable_constraint_primary_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint_primary_key" ):
                listener.exitTable_constraint_primary_key(self)




    def table_constraint_primary_key(self):

        localctx = SqlParser.Table_constraint_primary_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_table_constraint_primary_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(SqlParser.K_PRIMARY)
            self.state = 1463
            self.match(SqlParser.K_KEY)
            self.state = 1464
            self.match(SqlParser.OPEN_PAR)
            self.state = 1465
            self.indexed_column()
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1466
                self.match(SqlParser.COMMA)
                self.state = 1467
                self.indexed_column()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1473
            self.match(SqlParser.CLOSE_PAR)
            self.state = 1474
            self.conflict_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraint_foreign_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FOREIGN(self):
            return self.getToken(SqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def fk_origin_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Fk_origin_column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Fk_origin_column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SqlParser.Foreign_key_clauseContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_constraint_foreign_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint_foreign_key" ):
                listener.enterTable_constraint_foreign_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint_foreign_key" ):
                listener.exitTable_constraint_foreign_key(self)




    def table_constraint_foreign_key(self):

        localctx = SqlParser.Table_constraint_foreign_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_table_constraint_foreign_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.match(SqlParser.K_FOREIGN)
            self.state = 1477
            self.match(SqlParser.K_KEY)
            self.state = 1478
            self.match(SqlParser.OPEN_PAR)
            self.state = 1479
            self.fk_origin_column_name()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1480
                self.match(SqlParser.COMMA)
                self.state = 1481
                self.fk_origin_column_name()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1487
            self.match(SqlParser.CLOSE_PAR)
            self.state = 1488
            self.foreign_key_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraint_uniqueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNIQUE(self):
            return self.getToken(SqlParser.K_UNIQUE, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Indexed_columnContext,i)


        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_constraint_unique

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint_unique" ):
                listener.enterTable_constraint_unique(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint_unique" ):
                listener.exitTable_constraint_unique(self)




    def table_constraint_unique(self):

        localctx = SqlParser.Table_constraint_uniqueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_table_constraint_unique)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.match(SqlParser.K_UNIQUE)
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1491
                self.match(SqlParser.K_KEY)


            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1494
                self.name()


            self.state = 1497
            self.match(SqlParser.OPEN_PAR)
            self.state = 1498
            self.indexed_column()
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1499
                self.match(SqlParser.COMMA)
                self.state = 1500
                self.indexed_column()
                self.state = 1505
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1506
            self.match(SqlParser.CLOSE_PAR)
            self.state = 1507
            self.conflict_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraint_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Indexed_columnContext,i)


        def conflict_clause(self):
            return self.getTypedRuleContext(SqlParser.Conflict_clauseContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_constraint_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint_key" ):
                listener.enterTable_constraint_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint_key" ):
                listener.exitTable_constraint_key(self)




    def table_constraint_key(self):

        localctx = SqlParser.Table_constraint_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_table_constraint_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(SqlParser.K_KEY)
            self.state = 1511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.state = 1510
                self.name()


            self.state = 1513
            self.match(SqlParser.OPEN_PAR)
            self.state = 1514
            self.indexed_column()
            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1515
                self.match(SqlParser.COMMA)
                self.state = 1516
                self.indexed_column()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1522
            self.match(SqlParser.CLOSE_PAR)
            self.state = 1523
            self.conflict_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fk_origin_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SqlParser.Column_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_fk_origin_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFk_origin_column_name" ):
                listener.enterFk_origin_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFk_origin_column_name" ):
                listener.exitFk_origin_column_name(self)




    def fk_origin_column_name(self):

        localctx = SqlParser.Fk_origin_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fk_origin_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Cte_table_nameContext,i)


        def K_AS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlParser.K_AS)
            else:
                return self.getToken(SqlParser.K_AS, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SqlParser.Select_stmtContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(SqlParser.K_WITH)
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1528
                self.match(SqlParser.K_RECURSIVE)


            self.state = 1531
            self.cte_table_name()
            self.state = 1532
            self.match(SqlParser.K_AS)
            self.state = 1533
            self.match(SqlParser.OPEN_PAR)
            self.state = 1534
            self.select_stmt()
            self.state = 1535
            self.match(SqlParser.CLOSE_PAR)
            self.state = 1545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlParser.COMMA:
                self.state = 1536
                self.match(SqlParser.COMMA)
                self.state = 1537
                self.cte_table_name()
                self.state = 1538
                self.match(SqlParser.K_AS)
                self.state = 1539
                self.match(SqlParser.OPEN_PAR)
                self.state = 1540
                self.select_stmt()
                self.state = 1541
                self.match(SqlParser.CLOSE_PAR)
                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def K_INDEXED(self):
            return self.getToken(SqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1548
                self.database_name()
                self.state = 1549
                self.match(SqlParser.DOT)


            self.state = 1553
            self.table_name()
            self.state = 1559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_INDEXED]:
                self.state = 1554
                self.match(SqlParser.K_INDEXED)
                self.state = 1555
                self.match(SqlParser.K_BY)
                self.state = 1556
                self.index_name()
                pass
            elif token in [SqlParser.K_NOT]:
                self.state = 1557
                self.match(SqlParser.K_NOT)
                self.state = 1558
                self.match(SqlParser.K_INDEXED)
                pass
            elif token in [SqlParser.EOF, SqlParser.SCOL, SqlParser.K_ALTER, SqlParser.K_ANALYZE, SqlParser.K_ATTACH, SqlParser.K_BEGIN, SqlParser.K_COMMIT, SqlParser.K_CREATE, SqlParser.K_DELETE, SqlParser.K_DETACH, SqlParser.K_DROP, SqlParser.K_END, SqlParser.K_EXPLAIN, SqlParser.K_INSERT, SqlParser.K_LIMIT, SqlParser.K_ORDER, SqlParser.K_PRAGMA, SqlParser.K_REINDEX, SqlParser.K_RELEASE, SqlParser.K_REPLACE, SqlParser.K_ROLLBACK, SqlParser.K_SAVEPOINT, SqlParser.K_SELECT, SqlParser.K_SET, SqlParser.K_UPDATE, SqlParser.K_VACUUM, SqlParser.K_VALUES, SqlParser.K_WHERE, SqlParser.K_WITH, SqlParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.expr(0)
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1562
                self.match(SqlParser.K_COLLATE)
                self.state = 1563
                self.collation_name()


            self.state = 1567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1566
                _la = self._input.LA(1)
                if not(_la==SqlParser.K_ASC or _la==SqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SqlParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SqlParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SqlParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pragma_value)
        try:
            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1569
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1570
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1571
                self.match(SqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.table_name()
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.OPEN_PAR:
                self.state = 1575
                self.match(SqlParser.OPEN_PAR)
                self.state = 1576
                self.column_name()
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1577
                    self.match(SqlParser.COMMA)
                    self.state = 1578
                    self.column_name()
                    self.state = 1583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1584
                self.match(SqlParser.CLOSE_PAR)


            self.state = 1588
            self.match(SqlParser.K_AS)
            self.state = 1589
            self.match(SqlParser.OPEN_PAR)
            self.state = 1590
            self.select_stmt()
            self.state = 1591
            self.match(SqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1593
                self.match(SqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.table_name()
                self.state = 1595
                self.match(SqlParser.DOT)
                self.state = 1596
                self.match(SqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1598
                self.expr(0)
                self.state = 1603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlParser.K_AS:
                        self.state = 1599
                        self.match(SqlParser.K_AS)


                    self.state = 1602
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SqlParser.Database_nameContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(SqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1607
                    self.database_name()
                    self.state = 1608
                    self.match(SqlParser.DOT)


                self.state = 1612
                self.table_name()
                self.state = 1617
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1614
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                    if la_ == 1:
                        self.state = 1613
                        self.match(SqlParser.K_AS)


                    self.state = 1616
                    self.table_alias()


                self.state = 1624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.match(SqlParser.K_INDEXED)
                    self.state = 1620
                    self.match(SqlParser.K_BY)
                    self.state = 1621
                    self.index_name()

                elif la_ == 2:
                    self.state = 1622
                    self.match(SqlParser.K_NOT)
                    self.state = 1623
                    self.match(SqlParser.K_INDEXED)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.match(SqlParser.OPEN_PAR)
                self.state = 1636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.table_or_subquery()
                    self.state = 1632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 1628
                        self.match(SqlParser.COMMA)
                        self.state = 1629
                        self.table_or_subquery()
                        self.state = 1634
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1635
                    self.join_clause()
                    pass


                self.state = 1638
                self.match(SqlParser.CLOSE_PAR)
                self.state = 1643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1640
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
                    if la_ == 1:
                        self.state = 1639
                        self.match(SqlParser.K_AS)


                    self.state = 1642
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1645
                self.match(SqlParser.OPEN_PAR)
                self.state = 1646
                self.select_stmt()
                self.state = 1647
                self.match(SqlParser.CLOSE_PAR)
                self.state = 1652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
                if la_ == 1:
                    self.state = 1649
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                    if la_ == 1:
                        self.state = 1648
                        self.match(SqlParser.K_AS)


                    self.state = 1651
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_join_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1656
            self.table_or_subquery()
            self.state = 1663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1657
                    self.join_operator()
                    self.state = 1658
                    self.table_or_subquery()
                    self.state = 1659
                    self.join_constraint() 
                self.state = 1665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_JOIN(self):
            return self.getToken(SqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1666
                self.match(SqlParser.COMMA)
                pass
            elif token in [SqlParser.K_CROSS, SqlParser.K_INNER, SqlParser.K_JOIN, SqlParser.K_LEFT, SqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_NATURAL:
                    self.state = 1667
                    self.match(SqlParser.K_NATURAL)


                self.state = 1676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlParser.K_LEFT]:
                    self.state = 1670
                    self.match(SqlParser.K_LEFT)
                    self.state = 1672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlParser.K_OUTER:
                        self.state = 1671
                        self.match(SqlParser.K_OUTER)


                    pass
                elif token in [SqlParser.K_INNER]:
                    self.state = 1674
                    self.match(SqlParser.K_INNER)
                    pass
                elif token in [SqlParser.K_CROSS]:
                    self.state = 1675
                    self.match(SqlParser.K_CROSS)
                    pass
                elif token in [SqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1678
                self.match(SqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SqlParser.K_USING, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.match(SqlParser.K_ON)
                self.state = 1682
                self.expr(0)

            elif la_ == 2:
                self.state = 1683
                self.match(SqlParser.K_USING)
                self.state = 1684
                self.match(SqlParser.OPEN_PAR)
                self.state = 1685
                self.column_name()
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1686
                    self.match(SqlParser.COMMA)
                    self.state = 1687
                    self.column_name()
                    self.state = 1692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1693
                self.match(SqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SqlParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SqlParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1697
                self.match(SqlParser.K_SELECT)
                self.state = 1699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1698
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.K_ALL or _la==SqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1701
                self.result_column()
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1702
                    self.match(SqlParser.COMMA)
                    self.state = 1703
                    self.result_column()
                    self.state = 1708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_FROM:
                    self.state = 1709
                    self.match(SqlParser.K_FROM)
                    self.state = 1719
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                    if la_ == 1:
                        self.state = 1710
                        self.table_or_subquery()
                        self.state = 1715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlParser.COMMA:
                            self.state = 1711
                            self.match(SqlParser.COMMA)
                            self.state = 1712
                            self.table_or_subquery()
                            self.state = 1717
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1718
                        self.join_clause()
                        pass




                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_WHERE:
                    self.state = 1723
                    self.match(SqlParser.K_WHERE)
                    self.state = 1724
                    self.expr(0)


                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.K_GROUP:
                    self.state = 1727
                    self.match(SqlParser.K_GROUP)
                    self.state = 1728
                    self.match(SqlParser.K_BY)
                    self.state = 1729
                    self.expr(0)
                    self.state = 1734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 1730
                        self.match(SqlParser.COMMA)
                        self.state = 1731
                        self.expr(0)
                        self.state = 1736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlParser.K_HAVING:
                        self.state = 1737
                        self.match(SqlParser.K_HAVING)
                        self.state = 1738
                        self.expr(0)




                pass
            elif token in [SqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1743
                self.match(SqlParser.K_VALUES)
                self.state = 1744
                self.match(SqlParser.OPEN_PAR)
                self.state = 1745
                self.expr(0)
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1746
                    self.match(SqlParser.COMMA)
                    self.state = 1747
                    self.expr(0)
                    self.state = 1752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1753
                self.match(SqlParser.CLOSE_PAR)
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1754
                    self.match(SqlParser.COMMA)
                    self.state = 1755
                    self.match(SqlParser.OPEN_PAR)
                    self.state = 1756
                    self.expr(0)
                    self.state = 1761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlParser.COMMA:
                        self.state = 1757
                        self.match(SqlParser.COMMA)
                        self.state = 1758
                        self.expr(0)
                        self.state = 1763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1764
                    self.match(SqlParser.CLOSE_PAR)
                    self.state = 1770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_compound_operator)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(SqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1774
                self.match(SqlParser.K_UNION)
                self.state = 1775
                self.match(SqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1776
                self.match(SqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1777
                self.match(SqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SqlParser.Table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SqlParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SqlParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.table_name()
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlParser.OPEN_PAR:
                self.state = 1781
                self.match(SqlParser.OPEN_PAR)
                self.state = 1782
                self.column_name()
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlParser.COMMA:
                    self.state = 1783
                    self.match(SqlParser.COMMA)
                    self.state = 1784
                    self.column_name()
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1790
                self.match(SqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SqlParser.NUMERIC_LITERAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.PLUS, SqlParser.MINUS, SqlParser.NUMERIC_LITERAL]:
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlParser.PLUS or _la==SqlParser.MINUS:
                    self.state = 1794
                    _la = self._input.LA(1)
                    if not(_la==SqlParser.PLUS or _la==SqlParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1797
                self.match(SqlParser.NUMERIC_LITERAL)
                pass
            elif token in [SqlParser.STAR]:
                self.state = 1798
                self.match(SqlParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.K_CURRENT_DATE) | (1 << SqlParser.K_CURRENT_TIME) | (1 << SqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (SqlParser.K_NULL - 109)) | (1 << (SqlParser.NUMERIC_LITERAL - 109)) | (1 << (SqlParser.STRING_LITERAL - 109)) | (1 << (SqlParser.BLOB_LITERAL - 109)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlParser.PLUS) | (1 << SqlParser.MINUS) | (1 << SqlParser.TILDE))) != 0) or _la==SqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SqlParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(SqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SqlParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SqlParser.Column_defContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SqlParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_module_argument)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1808
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            _la = self._input.LA(1)
            if not(_la==SqlParser.IDENTIFIER or _la==SqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SqlParser.K_END, 0)

        def K_ENABLE(self):
            return self.getToken(SqlParser.K_ENABLE, 0)

        def K_ESCAPE(self):
            return self.getToken(SqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SqlParser.K_WITHOUT, 0)

        def K_NEXTVAL(self):
            return self.getToken(SqlParser.K_NEXTVAL, 0)

        def getRuleIndex(self):
            return SqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            _la = self._input.LA(1)
            if not(((((_la - 28)) & ~0x3f) == 0 and ((1 << (_la - 28)) & ((1 << (SqlParser.K_ABORT - 28)) | (1 << (SqlParser.K_ACTION - 28)) | (1 << (SqlParser.K_ADD - 28)) | (1 << (SqlParser.K_AFTER - 28)) | (1 << (SqlParser.K_ALL - 28)) | (1 << (SqlParser.K_ALTER - 28)) | (1 << (SqlParser.K_ANALYZE - 28)) | (1 << (SqlParser.K_AND - 28)) | (1 << (SqlParser.K_AS - 28)) | (1 << (SqlParser.K_ASC - 28)) | (1 << (SqlParser.K_ATTACH - 28)) | (1 << (SqlParser.K_AUTOINCREMENT - 28)) | (1 << (SqlParser.K_BEFORE - 28)) | (1 << (SqlParser.K_BEGIN - 28)) | (1 << (SqlParser.K_BETWEEN - 28)) | (1 << (SqlParser.K_BY - 28)) | (1 << (SqlParser.K_CASCADE - 28)) | (1 << (SqlParser.K_CASE - 28)) | (1 << (SqlParser.K_CAST - 28)) | (1 << (SqlParser.K_CHECK - 28)) | (1 << (SqlParser.K_COLLATE - 28)) | (1 << (SqlParser.K_COLUMN - 28)) | (1 << (SqlParser.K_COMMIT - 28)) | (1 << (SqlParser.K_CONFLICT - 28)) | (1 << (SqlParser.K_CONSTRAINT - 28)) | (1 << (SqlParser.K_CREATE - 28)) | (1 << (SqlParser.K_CROSS - 28)) | (1 << (SqlParser.K_CURRENT_DATE - 28)) | (1 << (SqlParser.K_CURRENT_TIME - 28)) | (1 << (SqlParser.K_CURRENT_TIMESTAMP - 28)) | (1 << (SqlParser.K_DATABASE - 28)) | (1 << (SqlParser.K_DEFAULT - 28)) | (1 << (SqlParser.K_DEFERRABLE - 28)) | (1 << (SqlParser.K_DEFERRED - 28)) | (1 << (SqlParser.K_DELETE - 28)) | (1 << (SqlParser.K_DESC - 28)) | (1 << (SqlParser.K_DETACH - 28)) | (1 << (SqlParser.K_DISTINCT - 28)) | (1 << (SqlParser.K_DROP - 28)) | (1 << (SqlParser.K_EACH - 28)) | (1 << (SqlParser.K_ELSE - 28)) | (1 << (SqlParser.K_END - 28)) | (1 << (SqlParser.K_ENABLE - 28)) | (1 << (SqlParser.K_ESCAPE - 28)) | (1 << (SqlParser.K_EXCEPT - 28)) | (1 << (SqlParser.K_EXCLUSIVE - 28)) | (1 << (SqlParser.K_EXISTS - 28)) | (1 << (SqlParser.K_EXPLAIN - 28)) | (1 << (SqlParser.K_FAIL - 28)) | (1 << (SqlParser.K_FOR - 28)) | (1 << (SqlParser.K_FOREIGN - 28)) | (1 << (SqlParser.K_FROM - 28)) | (1 << (SqlParser.K_FULL - 28)) | (1 << (SqlParser.K_GLOB - 28)) | (1 << (SqlParser.K_GROUP - 28)) | (1 << (SqlParser.K_HAVING - 28)) | (1 << (SqlParser.K_IF - 28)) | (1 << (SqlParser.K_IGNORE - 28)) | (1 << (SqlParser.K_IMMEDIATE - 28)) | (1 << (SqlParser.K_IN - 28)) | (1 << (SqlParser.K_INDEX - 28)) | (1 << (SqlParser.K_INDEXED - 28)) | (1 << (SqlParser.K_INITIALLY - 28)) | (1 << (SqlParser.K_INNER - 28)))) != 0) or ((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (SqlParser.K_INSERT - 92)) | (1 << (SqlParser.K_INSTEAD - 92)) | (1 << (SqlParser.K_INTERSECT - 92)) | (1 << (SqlParser.K_INTO - 92)) | (1 << (SqlParser.K_IS - 92)) | (1 << (SqlParser.K_ISNULL - 92)) | (1 << (SqlParser.K_JOIN - 92)) | (1 << (SqlParser.K_KEY - 92)) | (1 << (SqlParser.K_LEFT - 92)) | (1 << (SqlParser.K_LIKE - 92)) | (1 << (SqlParser.K_LIMIT - 92)) | (1 << (SqlParser.K_MATCH - 92)) | (1 << (SqlParser.K_NATURAL - 92)) | (1 << (SqlParser.K_NEXTVAL - 92)) | (1 << (SqlParser.K_NO - 92)) | (1 << (SqlParser.K_NOT - 92)) | (1 << (SqlParser.K_NOTNULL - 92)) | (1 << (SqlParser.K_NULL - 92)) | (1 << (SqlParser.K_OF - 92)) | (1 << (SqlParser.K_OFFSET - 92)) | (1 << (SqlParser.K_ON - 92)) | (1 << (SqlParser.K_OR - 92)) | (1 << (SqlParser.K_ORDER - 92)) | (1 << (SqlParser.K_OUTER - 92)) | (1 << (SqlParser.K_PLAN - 92)) | (1 << (SqlParser.K_PRAGMA - 92)) | (1 << (SqlParser.K_PRIMARY - 92)) | (1 << (SqlParser.K_QUERY - 92)) | (1 << (SqlParser.K_RAISE - 92)) | (1 << (SqlParser.K_RECURSIVE - 92)) | (1 << (SqlParser.K_REFERENCES - 92)) | (1 << (SqlParser.K_REGEXP - 92)) | (1 << (SqlParser.K_REINDEX - 92)) | (1 << (SqlParser.K_RELEASE - 92)) | (1 << (SqlParser.K_RENAME - 92)) | (1 << (SqlParser.K_REPLACE - 92)) | (1 << (SqlParser.K_RESTRICT - 92)) | (1 << (SqlParser.K_RIGHT - 92)) | (1 << (SqlParser.K_ROLLBACK - 92)) | (1 << (SqlParser.K_ROW - 92)) | (1 << (SqlParser.K_SAVEPOINT - 92)) | (1 << (SqlParser.K_SELECT - 92)) | (1 << (SqlParser.K_SET - 92)) | (1 << (SqlParser.K_TABLE - 92)) | (1 << (SqlParser.K_TEMP - 92)) | (1 << (SqlParser.K_TEMPORARY - 92)) | (1 << (SqlParser.K_THEN - 92)) | (1 << (SqlParser.K_TO - 92)) | (1 << (SqlParser.K_TRANSACTION - 92)) | (1 << (SqlParser.K_TRIGGER - 92)) | (1 << (SqlParser.K_UNION - 92)) | (1 << (SqlParser.K_UNIQUE - 92)) | (1 << (SqlParser.K_UPDATE - 92)) | (1 << (SqlParser.K_USING - 92)) | (1 << (SqlParser.K_VACUUM - 92)) | (1 << (SqlParser.K_VALUES - 92)) | (1 << (SqlParser.K_VIEW - 92)) | (1 << (SqlParser.K_VIRTUAL - 92)) | (1 << (SqlParser.K_WHEN - 92)) | (1 << (SqlParser.K_WHERE - 92)) | (1 << (SqlParser.K_WITH - 92)) | (1 << (SqlParser.K_WITHOUT - 92)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnknownContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlParser.RULE_unknown

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnknown" ):
                listener.enterUnknown(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnknown" ):
                listener.exitUnknown(self)




    def unknown(self):

        localctx = SqlParser.UnknownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_unknown)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1815
                    self.matchWildcard()

                else:
                    raise NoViableAltException(self)
                self.state = 1818 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = SqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Source_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_source_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_table_name" ):
                listener.enterSource_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_table_name" ):
                listener.exitSource_table_name(self)




    def source_table_name(self):

        localctx = SqlParser.Source_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_source_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SqlParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SqlParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SqlParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1844
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SqlParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SqlParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SqlParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SqlParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SqlParser.STRING_LITERAL, 0)

        def any_name(self):
            return self.getTypedRuleContext(SqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_any_name)
        try:
            self.state = 1867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1856
                self.match(SqlParser.IDENTIFIER)
                pass
            elif token in [SqlParser.K_ABORT, SqlParser.K_ACTION, SqlParser.K_ADD, SqlParser.K_AFTER, SqlParser.K_ALL, SqlParser.K_ALTER, SqlParser.K_ANALYZE, SqlParser.K_AND, SqlParser.K_AS, SqlParser.K_ASC, SqlParser.K_ATTACH, SqlParser.K_AUTOINCREMENT, SqlParser.K_BEFORE, SqlParser.K_BEGIN, SqlParser.K_BETWEEN, SqlParser.K_BY, SqlParser.K_CASCADE, SqlParser.K_CASE, SqlParser.K_CAST, SqlParser.K_CHECK, SqlParser.K_COLLATE, SqlParser.K_COLUMN, SqlParser.K_COMMIT, SqlParser.K_CONFLICT, SqlParser.K_CONSTRAINT, SqlParser.K_CREATE, SqlParser.K_CROSS, SqlParser.K_CURRENT_DATE, SqlParser.K_CURRENT_TIME, SqlParser.K_CURRENT_TIMESTAMP, SqlParser.K_DATABASE, SqlParser.K_DEFAULT, SqlParser.K_DEFERRABLE, SqlParser.K_DEFERRED, SqlParser.K_DELETE, SqlParser.K_DESC, SqlParser.K_DETACH, SqlParser.K_DISTINCT, SqlParser.K_DROP, SqlParser.K_EACH, SqlParser.K_ELSE, SqlParser.K_END, SqlParser.K_ENABLE, SqlParser.K_ESCAPE, SqlParser.K_EXCEPT, SqlParser.K_EXCLUSIVE, SqlParser.K_EXISTS, SqlParser.K_EXPLAIN, SqlParser.K_FAIL, SqlParser.K_FOR, SqlParser.K_FOREIGN, SqlParser.K_FROM, SqlParser.K_FULL, SqlParser.K_GLOB, SqlParser.K_GROUP, SqlParser.K_HAVING, SqlParser.K_IF, SqlParser.K_IGNORE, SqlParser.K_IMMEDIATE, SqlParser.K_IN, SqlParser.K_INDEX, SqlParser.K_INDEXED, SqlParser.K_INITIALLY, SqlParser.K_INNER, SqlParser.K_INSERT, SqlParser.K_INSTEAD, SqlParser.K_INTERSECT, SqlParser.K_INTO, SqlParser.K_IS, SqlParser.K_ISNULL, SqlParser.K_JOIN, SqlParser.K_KEY, SqlParser.K_LEFT, SqlParser.K_LIKE, SqlParser.K_LIMIT, SqlParser.K_MATCH, SqlParser.K_NATURAL, SqlParser.K_NEXTVAL, SqlParser.K_NO, SqlParser.K_NOT, SqlParser.K_NOTNULL, SqlParser.K_NULL, SqlParser.K_OF, SqlParser.K_OFFSET, SqlParser.K_ON, SqlParser.K_OR, SqlParser.K_ORDER, SqlParser.K_OUTER, SqlParser.K_PLAN, SqlParser.K_PRAGMA, SqlParser.K_PRIMARY, SqlParser.K_QUERY, SqlParser.K_RAISE, SqlParser.K_RECURSIVE, SqlParser.K_REFERENCES, SqlParser.K_REGEXP, SqlParser.K_REINDEX, SqlParser.K_RELEASE, SqlParser.K_RENAME, SqlParser.K_REPLACE, SqlParser.K_RESTRICT, SqlParser.K_RIGHT, SqlParser.K_ROLLBACK, SqlParser.K_ROW, SqlParser.K_SAVEPOINT, SqlParser.K_SELECT, SqlParser.K_SET, SqlParser.K_TABLE, SqlParser.K_TEMP, SqlParser.K_TEMPORARY, SqlParser.K_THEN, SqlParser.K_TO, SqlParser.K_TRANSACTION, SqlParser.K_TRIGGER, SqlParser.K_UNION, SqlParser.K_UNIQUE, SqlParser.K_UPDATE, SqlParser.K_USING, SqlParser.K_VACUUM, SqlParser.K_VALUES, SqlParser.K_VIEW, SqlParser.K_VIRTUAL, SqlParser.K_WHEN, SqlParser.K_WHERE, SqlParser.K_WITH, SqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.keyword()
                pass
            elif token in [SqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1858
                self.match(SqlParser.STRING_LITERAL)
                pass
            elif token in [SqlParser.T__1]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1859
                self.match(SqlParser.T__1)
                self.state = 1860
                self.any_name()
                self.state = 1861
                self.match(SqlParser.T__2)
                pass
            elif token in [SqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1863
                self.match(SqlParser.OPEN_PAR)
                self.state = 1864
                self.any_name()
                self.state = 1865
                self.match(SqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




